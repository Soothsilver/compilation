package compiler;

import java.util.*;
import compiler.analysis.SubroutineGroup;
import compiler.nodes.Node;
import compiler.nodes.declarations.*;
import compiler.nodes.statements.Statement;

public class Environment {
    private Compilation compilation;
    private ScopeTree<Subroutine> subroutineTable = null;
    private ScopeTree<Variable> variableTable = null;
    private ScopeTree<TypeOrTypeTemplate> typeTable = null;
    private LinkedList<ScopeTree<Subroutine>> subroutineStack = null;
    private LinkedList<ScopeTree<Variable>> variableStack = null;
    private LinkedList<ScopeTree<TypeOrTypeTemplate>> typeStack = null;
    private int depth = 0;

    public Environment(Compilation compilation) {
        this.compilation = compilation;
    }
    // All "find" methods return null if they cannot find the thing specified.
    // All "add" methods report an error if an attempt is made to add a thing that already exists (and in case of subroutines, is absolutely identical).
    //  To report this error, use the Compilation class.

    private class ScopeTree<T extends Declaration> {

        private ScopeTree<T> left;
        private ScopeTree<T> right;
        private T decl;
        int scope;

        private ScopeTree(ScopeTree<T> left, ScopeTree<T> right, T decl, int scope) {
    		this.left = left;
    		this.right = right;
    		this.decl = decl;
    		this.scope = scope;
        }

        public ScopeTree(T decl) {
    		this(null, null, decl, depth);
        }

        public T find (String id) {
        	if (id.compareTo(decl.getId()) == 0)
    		    return decl;
        	else if (id.compareTo(decl.getId()) < 0) {
    		    if (left==null)
    				return null;
    		    else
    				return left.find(id);
    		}
    		else if (id.compareTo(decl.getId()) > 0) {
    		    if (right==null)
    				return null;
    		    else
    				return right.find(id);
    		}
        }

        private LinkedList<T> findGroup (String id, LinkedList<T> group) {
        	if (id.compareTo(decl.getId()) == 0) {
    		    group.addFirst(decl);
        	}
       		if (id.compareTo(decl.getId()) <= 0) {
    		    if (left==null)
    				return null;
    		    else
    				left.findGroup(id, group);
    		}
       		if (id.compareTo(decl.getId()) >= 0) {
    		    if (right==null)
    				return null;
    		    else
    				right.findGroup(id, group);
    		}
    		return group;
        }

        public LinkedList<T> findGroup (String id) {
        	LinkedList<T> group = new LinkedList();
        	return findGroup(id, group);
        }

        public ScopeTree<T> add (T decl, ScopeTree<T> tree) {
        	if (tree == null)
        		return new ScopeTree<T>(decl);
        	else if (decl.getSig().compareTo(this.decl.getSig()) == 0 && scope != depth)
        		return new ScopeTree<T>(left, right, decl, depth);
        	else if (decl.getSig().compareTo(this.decl.getSig()) == 0)
        		compilation.semanticError(this.decl.getSig() + " is already defined.");
        	else if (decl.getSig().compareTo(this.decl.getSig()) < 0)
        		return new ScopeTree<T>(add(decl, left), right, this.decl, scope);
        	else if (decl.getSig().compareTo(this.decl.getSig()) > 0)
        		return new ScopeTree<T>(left, add(decl, right), this.decl, scope);
        }
    }

    public TypeOrTypeTemplate findType(String identifier) {
        // This means we don't support type overloading.
        // i.e. this code is an error:
        // class A { }
        // class A<T> { }
    	if (typeTable == null)
    		return null;
    	else
    		return typeTable.find(identifier);
    }
    public Variable findVariable(String identifier) {
    	if (variableTable == null)
    		return null;
    	else
    		return variableTable.find(identifier);
    }

    public LinkedList<Subroutine> findSubroutines(String identifier) {
    	if (subroutineTable == null)
    		return null;
    	else
    		return subroutineTable.findGroup(identifier);
    }

    public void addSubroutine(Subroutine subroutine) {
    	if (subroutineTable == null) {
    		subroutineTable = new ScopeTree<Subroutine>(subroutine);
    	}
    	else
    		subroutineTable = subroutineTable.add(subroutine, subroutineTable);
    }

    public void addType(TypeOrTypeTemplate type) {
    	if (typeTable == null) {
    		typeTable = new ScopeTree<TypeOrTypeTemplate>(type);
    	}
    	else
    		typeTable = typeTable.add(type, typeTable);
    }

    public void addVariable(Variable variable) {
    	if (variableTable == null) {
    		variableTable = new ScopeTree<Variable>(variable);
    	}
    	else
    		variableTable = variableTable.add(variable, variableTable);
    }


    public void enterFunction(String name) {
        enterScope();
    }
    public void enterProcedure(String name) {
        enterScope();
    }
    public void leaveSubroutine() {
        leaveScope();
    }


    public void enterScope() {
    	depth++;
    	subroutineStack.addFirst(subroutineTable);
    	variableStack.addFirst(variableTable);
    	typeStack.addFirst(typeTable);
    }

    public void leaveScope() {
    	depth--;
    	subroutineTable = subroutineStack.removeFirst();
    	variableTable = variableStack.removeFirst();
    	typeTable = typeStack.removeFirst();
    }
}
