/* The following code was generated by JFlex 1.4.2 on 25/10/15 02:01 */

package compiler.generated;
import java_cup.runtime.*;
import compiler.Compilation;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 25/10/15 02:01 from the specification file
 * <tt>C:/Users/petrh/compilation/lexer/compiler.jflex</tt>
 */
public class CompilerLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LONG_COMMENT = 4;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\66\1\61\2\0\1\62\22\0\1\66\1\17\1\63\2\0"+
    "\1\13\1\20\1\65\1\32\1\33\1\11\1\23\1\36\1\10\1\6"+
    "\1\12\1\3\11\2\1\34\1\35\1\14\1\15\1\16\1\0\1\25"+
    "\6\5\24\1\1\26\1\64\1\27\1\22\1\1\1\0\1\53\1\55"+
    "\1\42\1\43\1\7\1\45\1\1\1\57\1\50\1\1\1\56\1\51"+
    "\1\1\1\46\1\41\1\37\1\1\1\40\1\52\1\47\1\44\1\1"+
    "\1\60\1\4\1\54\1\1\1\30\1\21\1\31\1\24\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\0\1\2\1\3\2\1\1\4\1\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\14\3\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\37\2\43"+
    "\1\44\1\0\1\45\1\3\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\2\3\1\74\5\3\1\75\1\76\4\3"+
    "\2\0\1\77\1\100\1\101\1\102\1\44\1\0\1\3"+
    "\2\52\1\103\1\104\4\3\1\105\1\3\1\106\6\3"+
    "\1\107\4\0\1\107\1\110\6\3\1\111\1\112\1\3"+
    "\1\113\2\3\1\114\1\115\1\116\1\117\1\120\3\3"+
    "\1\121\3\3\1\122\1\123\1\3\1\124\1\125\4\3"+
    "\1\126\3\3\1\127\1\3\1\130\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\245\0\245\0\u0483"+
    "\0\u04ba\0\245\0\245\0\245\0\245\0\245\0\245\0\245"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672"+
    "\0\u06a9\0\u06e0\0\u0717\0\u074e\0\245\0\245\0\u0785\0\245"+
    "\0\245\0\245\0\245\0\u07bc\0\245\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\245\0\245\0\245\0\245\0\u0906\0\245"+
    "\0\245\0\u093d\0\245\0\245\0\245\0\u0974\0\245\0\245"+
    "\0\245\0\245\0\245\0\245\0\245\0\245\0\245\0\245"+
    "\0\u09ab\0\u09e2\0\334\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5"+
    "\0\334\0\334\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f"+
    "\0\245\0\245\0\245\0\245\0\u0c76\0\u0c76\0\u0cad\0\245"+
    "\0\u0ce4\0\245\0\245\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7"+
    "\0\u0e2e\0\334\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78"+
    "\0\245\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\334\0\u10c2"+
    "\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\334\0\334\0\u120c"+
    "\0\334\0\u1243\0\u127a\0\245\0\245\0\245\0\245\0\245"+
    "\0\u12b1\0\u12e8\0\u131f\0\334\0\u1356\0\u138d\0\u13c4\0\334"+
    "\0\334\0\u13fb\0\334\0\334\0\u1432\0\u1469\0\u14a0\0\u14d7"+
    "\0\334\0\u150e\0\u1545\0\u157c\0\334\0\u15b3\0\334\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\5\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\5\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\2\5\1\53\2\5\1\54\2\55\1\56\1\4"+
    "\1\57\1\55\61\60\1\61\1\62\1\63\1\64\2\60"+
    "\11\65\1\66\47\65\1\0\5\65\70\0\5\5\1\0"+
    "\1\5\27\0\22\5\10\0\2\6\2\0\1\67\1\70"+
    "\61\0\2\6\1\71\1\0\1\67\1\70\61\0\2\67"+
    "\64\0\5\5\1\0\1\5\27\0\12\5\1\72\7\5"+
    "\16\0\1\73\4\0\1\74\66\0\1\75\62\0\1\76"+
    "\1\77\2\0\1\100\66\0\1\101\65\0\1\102\1\103"+
    "\66\0\1\104\66\0\1\105\1\106\65\0\1\107\66\0"+
    "\1\110\2\0\1\111\63\0\1\112\3\0\1\113\62\0"+
    "\1\114\66\0\1\115\5\0\1\116\71\0\1\117\67\0"+
    "\1\120\40\0\5\5\1\0\1\5\27\0\1\5\1\121"+
    "\20\5\7\0\5\5\1\0\1\122\27\0\22\5\7\0"+
    "\5\5\1\0\1\5\27\0\6\5\1\123\13\5\7\0"+
    "\5\5\1\0\1\5\27\0\12\5\1\124\7\5\7\0"+
    "\5\5\1\0\1\5\27\0\2\5\1\125\2\5\1\126"+
    "\14\5\7\0\5\5\1\0\1\127\27\0\22\5\7\0"+
    "\5\5\1\0\1\5\27\0\15\5\1\130\4\5\7\0"+
    "\5\5\1\0\1\5\27\0\6\5\1\131\1\132\12\5"+
    "\7\0\5\5\1\0\1\5\27\0\11\5\1\133\10\5"+
    "\7\0\5\5\1\0\1\5\27\0\10\5\1\134\11\5"+
    "\7\0\5\5\1\0\1\5\27\0\1\5\1\135\20\5"+
    "\7\0\5\5\1\0\1\5\27\0\20\5\1\136\1\5"+
    "\6\0\61\137\1\0\2\137\1\140\2\137\40\141\1\62"+
    "\5\141\1\61\12\141\1\0\1\141\1\142\1\143\2\141"+
    "\12\0\1\144\56\0\2\67\3\0\1\70\61\0\2\145"+
    "\4\0\1\146\60\0\2\71\1\0\1\71\62\0\5\5"+
    "\1\0\1\5\27\0\13\5\1\147\6\5\6\0\61\77"+
    "\1\150\1\151\4\77\15\0\1\152\66\0\1\153\52\0"+
    "\5\5\1\0\1\5\27\0\2\5\1\154\17\5\7\0"+
    "\5\5\1\0\1\5\27\0\1\155\7\5\1\156\11\5"+
    "\7\0\5\5\1\0\1\5\27\0\14\5\1\157\5\5"+
    "\7\0\5\5\1\0\1\5\27\0\1\5\1\160\20\5"+
    "\7\0\5\5\1\0\1\5\27\0\7\5\1\161\12\5"+
    "\7\0\5\5\1\0\1\5\27\0\21\5\1\162\7\0"+
    "\5\5\1\0\1\5\27\0\1\163\21\5\7\0\5\5"+
    "\1\0\1\5\27\0\13\5\1\164\6\5\7\0\5\5"+
    "\1\0\1\5\27\0\1\5\1\165\1\166\17\5\7\0"+
    "\5\5\1\0\1\167\27\0\22\5\7\0\5\5\1\0"+
    "\1\5\27\0\11\5\1\170\10\5\73\0\1\171\41\0"+
    "\1\172\5\0\1\173\14\0\1\174\1\175\1\176\3\0"+
    "\2\145\64\0\5\5\1\0\1\177\27\0\22\5\67\0"+
    "\1\150\6\0\5\5\1\0\1\5\27\0\3\5\1\200"+
    "\16\5\7\0\5\5\1\0\1\201\27\0\22\5\7\0"+
    "\5\5\1\0\1\5\27\0\5\5\1\202\14\5\7\0"+
    "\5\5\1\0\1\5\27\0\13\5\1\203\6\5\7\0"+
    "\5\5\1\0\1\204\27\0\22\5\7\0\5\5\1\0"+
    "\1\5\27\0\3\5\1\205\16\5\7\0\5\5\1\0"+
    "\1\206\27\0\22\5\7\0\5\5\1\0\1\5\27\0"+
    "\10\5\1\207\11\5\7\0\5\5\1\0\1\5\27\0"+
    "\5\5\1\210\14\5\7\0\5\5\1\0\1\5\27\0"+
    "\1\211\21\5\7\0\5\5\1\0\1\5\27\0\14\5"+
    "\1\212\5\5\7\0\5\5\1\0\1\5\27\0\12\5"+
    "\1\213\7\5\73\0\1\214\66\0\1\215\66\0\1\216"+
    "\66\0\1\217\66\0\1\220\2\0\5\5\1\0\1\221"+
    "\27\0\22\5\7\0\5\5\1\0\1\5\27\0\14\5"+
    "\1\222\5\5\7\0\5\5\1\0\1\5\27\0\1\5"+
    "\1\223\20\5\7\0\5\5\1\0\1\5\27\0\13\5"+
    "\1\224\6\5\7\0\5\5\1\0\1\5\27\0\14\5"+
    "\1\225\5\5\7\0\5\5\1\0\1\5\27\0\10\5"+
    "\1\226\11\5\7\0\5\5\1\0\1\5\27\0\3\5"+
    "\1\227\16\5\7\0\5\5\1\0\1\5\27\0\17\5"+
    "\1\230\2\5\7\0\5\5\1\0\1\231\27\0\22\5"+
    "\7\0\5\5\1\0\1\5\27\0\4\5\1\232\15\5"+
    "\7\0\5\5\1\0\1\5\27\0\10\5\1\233\11\5"+
    "\7\0\5\5\1\0\1\5\27\0\7\5\1\234\12\5"+
    "\7\0\5\5\1\0\1\5\27\0\3\5\1\235\16\5"+
    "\7\0\5\5\1\0\1\5\27\0\11\5\1\236\10\5"+
    "\7\0\5\5\1\0\1\5\27\0\10\5\1\237\11\5"+
    "\7\0\5\5\1\0\1\5\27\0\5\5\1\240\14\5"+
    "\7\0\5\5\1\0\1\5\27\0\20\5\1\241\1\5"+
    "\7\0\5\5\1\0\1\5\27\0\2\5\1\242\17\5"+
    "\7\0\5\5\1\0\1\5\27\0\5\5\1\243\14\5"+
    "\7\0\5\5\1\0\1\5\27\0\1\5\1\244\20\5"+
    "\7\0\5\5\1\0\1\5\27\0\7\5\1\245\12\5"+
    "\7\0\5\5\1\0\1\5\27\0\1\5\1\246\20\5"+
    "\7\0\5\5\1\0\1\247\27\0\22\5\7\0\5\5"+
    "\1\0\1\250\27\0\22\5\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5610];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\0\1\11\21\1\2\11\2\1\7\11\14\1"+
    "\2\11\1\1\4\11\1\1\1\11\2\1\1\0\2\1"+
    "\4\11\1\1\2\11\1\1\3\11\1\1\12\11\16\1"+
    "\2\0\4\11\1\1\1\0\1\1\1\11\1\1\2\11"+
    "\15\1\1\11\4\0\16\1\5\11\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public Compilation compilation;
private String stringBeingBuilt;
private String characterBeingBuilt;

private Symbol symbol (int type) {
        return new Symbol (type, yyline, yycolumn);
}

private Symbol symbol (int type, Object value) {
        return new Symbol (type, yyline, yycolumn, value);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CompilerLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CompilerLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 63: 
          { compilation.lexicalError("Unrecognized escape sequence '" + yytext() + "' within a string.", yyline, yycolumn);
          }
        case 90: break;
        case 69: 
          { return symbol(CompilerSymbol.FOR);
          }
        case 91: break;
        case 14: 
          { return symbol(CompilerSymbol.BITWISEOR);
          }
        case 92: break;
        case 3: 
          { return symbol(CompilerSymbol.IDENTIFIER, yytext());
          }
        case 93: break;
        case 59: 
          { return symbol(CompilerSymbol.RIGHTTYPEBRACKET);
          }
        case 94: break;
        case 12: 
          { return symbol(CompilerSymbol.LOGICALNEGATION);
          }
        case 95: break;
        case 26: 
          { return symbol(CompilerSymbol.SEMICOLON);
          }
        case 96: break;
        case 58: 
          { return symbol(CompilerSymbol.LEFTTYPEBRACKET);
          }
        case 97: break;
        case 64: 
          { stringBeingBuilt += "\"";
          }
        case 98: break;
        case 71: 
          { return symbol(CompilerSymbol.CHARACTER,  yytext().toCharArray()[1]);
          }
        case 99: break;
        case 72: 
          { return symbol(CompilerSymbol.ELSE);
          }
        case 100: break;
        case 70: 
          { return symbol(CompilerSymbol.NEW);
          }
        case 101: break;
        case 29: 
          { yybegin(STRING); stringBeingBuilt = new String();
          }
        case 102: break;
        case 38: 
          { return symbol(CompilerSymbol.DECREMENT);
          }
        case 103: break;
        case 68: 
          { return symbol(CompilerSymbol.UNARYSHIFTRIGHT);
          }
        case 104: break;
        case 51: 
          { return symbol(CompilerSymbol.UNARYBITWISEAND);
          }
        case 105: break;
        case 5: 
          { return symbol(CompilerSymbol.MINUS);
          }
        case 106: break;
        case 61: 
          { return symbol(CompilerSymbol.IF);
          }
        case 107: break;
        case 10: 
          { return symbol(CompilerSymbol.EQUAL);
          }
        case 108: break;
        case 1: 
          { int number;
    try {
       number = Integer.parseInt(yytext());
    } catch (NumberFormatException ex) {
       number = 0;
       compilation.lexicalError("The integer '" + yytext() + "' is too large to fit in 32 bits.", yyline, yycolumn);
    }
    return symbol(CompilerSymbol.INTEGER,number );
          }
        case 109: break;
        case 18: 
          { return symbol(CompilerSymbol.CONCATENATE);
          }
        case 110: break;
        case 25: 
          { return symbol(CompilerSymbol.COLON);
          }
        case 111: break;
        case 47: 
          { return symbol(CompilerSymbol.EQUALEQUAL);
          }
        case 112: break;
        case 84: 
          { return symbol(CompilerSymbol.REPEAT);
          }
        case 113: break;
        case 36: 
          { float number = Float.parseFloat(yytext());
    if (Float.isInfinite(number)) {
        compilation.lexicalError("The number '" + yytext() + "' is too large to be represented as a floating-point number.", yyline, yycolumn);
    }
    if (number == 0) {
            compilation.lexicalError("The number '" + yytext() + "' is too small to be accurately represented as a floating-point number. Use '0' instead if that was the intention.", yyline, yycolumn);
    }
    return symbol(CompilerSymbol.FLOAT, number);
          }
        case 114: break;
        case 65: 
          { stringBeingBuilt += "\\";
          }
        case 115: break;
        case 34: 
          { yybegin(YYINITIAL); 
		 return symbol(CompilerSymbol.STRING, stringBeingBuilt);
          }
        case 116: break;
        case 74: 
          { return symbol(CompilerSymbol.LIST);
          }
        case 117: break;
        case 60: 
          { return symbol(CompilerSymbol.OF);
          }
        case 118: break;
        case 75: 
          { return symbol(CompilerSymbol.STOP);
          }
        case 119: break;
        case 11: 
          { return symbol(CompilerSymbol.GREATERTHAN);
          }
        case 120: break;
        case 22: 
          { return symbol(CompilerSymbol.RBRACE);
          }
        case 121: break;
        case 83: 
          { return symbol(CompilerSymbol.WHILE);
          }
        case 122: break;
        case 39: 
          { return symbol(CompilerSymbol.UNARYMINUS);
          }
        case 123: break;
        case 79: 
          { return symbol(CompilerSymbol.CHARACTER, '\\');
          }
        case 124: break;
        case 27: 
          { return symbol(CompilerSymbol.COMMA);
          }
        case 125: break;
        case 89: 
          { return symbol(CompilerSymbol.STRUCTURE);
          }
        case 126: break;
        case 56: 
          { return symbol(CompilerSymbol.UNARYPLUS);
          }
        case 127: break;
        case 16: 
          { return symbol(CompilerSymbol.PLUS);
          }
        case 128: break;
        case 88: 
          { return symbol(CompilerSymbol.PROCEDURE);
          }
        case 129: break;
        case 54: 
          { return symbol(CompilerSymbol.LOGICALOR);
          }
        case 130: break;
        case 85: 
          { return symbol(CompilerSymbol.RETURN);
          }
        case 131: break;
        case 24: 
          { return symbol(CompilerSymbol.RPAR);
          }
        case 132: break;
        case 35: 
          { /* do nothing */
          }
        case 133: break;
        case 55: 
          { return symbol(CompilerSymbol.UNARYXOR);
          }
        case 134: break;
        case 23: 
          { return symbol(CompilerSymbol.LPAR);
          }
        case 135: break;
        case 44: 
          { return symbol(CompilerSymbol.UNARYMODULO);
          }
        case 136: break;
        case 21: 
          { return symbol(CompilerSymbol.LBRACE);
          }
        case 137: break;
        case 33: 
          { stringBeingBuilt += "\r";
          }
        case 138: break;
        case 67: 
          { return symbol(CompilerSymbol.UNARYSHIFTLEFT);
          }
        case 139: break;
        case 46: 
          { return symbol(CompilerSymbol.LESSOREQUAL);
          }
        case 140: break;
        case 15: 
          { return symbol(CompilerSymbol.XOR);
          }
        case 141: break;
        case 52: 
          { return symbol(CompilerSymbol.LOGICALAND);
          }
        case 142: break;
        case 50: 
          { return symbol(CompilerSymbol.UNEQUAL);
          }
        case 143: break;
        case 6: 
          { return symbol(CompilerSymbol.TIMES);
          }
        case 144: break;
        case 43: 
          { return symbol(CompilerSymbol.UNARYDIVIDE);
          }
        case 145: break;
        case 42: 
          { /* ignore line comments */
          }
        case 146: break;
        case 4: 
          { return symbol(CompilerSymbol.PERIOD);
          }
        case 147: break;
        case 8: 
          { return symbol(CompilerSymbol.MODULO);
          }
        case 148: break;
        case 32: 
          { stringBeingBuilt += "\n";
          }
        case 149: break;
        case 48: 
          { return symbol(CompilerSymbol.GREATEROREQUAL);
          }
        case 150: break;
        case 66: 
          { yybegin(YYINITIAL);
          }
        case 151: break;
        case 30: 
          { compilation.lexicalError("An apostrophe encountered that is not part of any valid character constant. Skipping.", yyline, yycolumn);
          }
        case 152: break;
        case 45: 
          { return symbol(CompilerSymbol.SHIFTLEFT);
          }
        case 153: break;
        case 49: 
          { return symbol(CompilerSymbol.SHIFTRIGHT);
          }
        case 154: break;
        case 13: 
          { return symbol(CompilerSymbol.BITWISEAND);
          }
        case 155: break;
        case 87: 
          { return symbol(CompilerSymbol.FUNCTION);
          }
        case 156: break;
        case 81: 
          { return symbol(CompilerSymbol.CLASS);
          }
        case 157: break;
        case 7: 
          { return symbol(CompilerSymbol.DIVIDE);
          }
        case 158: break;
        case 28: 
          { /* ignore whitespace */
          }
        case 159: break;
        case 17: 
          { return symbol(CompilerSymbol.BITWISENEGATION);
          }
        case 160: break;
        case 86: 
          { return symbol(CompilerSymbol.FOREACH);
          }
        case 161: break;
        case 9: 
          { return symbol(CompilerSymbol.LESSTHAN);
          }
        case 162: break;
        case 57: 
          { return symbol(CompilerSymbol.INCREMENT);
          }
        case 163: break;
        case 77: 
          { return symbol(CompilerSymbol.CHARACTER, '\n');
          }
        case 164: break;
        case 78: 
          { return symbol(CompilerSymbol.CHARACTER, '\"');
          }
        case 165: break;
        case 53: 
          { return symbol(CompilerSymbol.UNARYBITWISEOR);
          }
        case 166: break;
        case 19: 
          { return symbol(CompilerSymbol.LBRACKET);
          }
        case 167: break;
        case 40: 
          { return symbol(CompilerSymbol.UNARYTIMES);
          }
        case 168: break;
        case 62: 
          { return symbol(CompilerSymbol.IN);
          }
        case 169: break;
        case 31: 
          { stringBeingBuilt += yytext();
          }
        case 170: break;
        case 73: 
          { return symbol(CompilerSymbol.TYPE);
          }
        case 171: break;
        case 2: 
          { compilation.lexicalError("Unknown character '" + yytext() + "' encountered. Skipping.", yyline, yycolumn);
          }
        case 172: break;
        case 37: 
          { int number;
	try {
       number = Integer.decode(yytext());
    } catch (NumberFormatException ex) {
        number = 0;
        compilation.lexicalError("The string '" + yytext() + "' doesn't represent a valid character.", yyline, yycolumn);
    }
    if (!Character.isDefined(number)) {
    	number = 0;
    	compilation.lexicalError("The string '" + yytext() + "' doesn't represent a valid character.", yyline, yycolumn);
    }
    char c = (char) number;
    return symbol(CompilerSymbol.CHARACTER, c);
          }
        case 173: break;
        case 76: 
          { return symbol(CompilerSymbol.CHARACTER, '\r');
          }
        case 174: break;
        case 20: 
          { return symbol(CompilerSymbol.RBRACKET);
          }
        case 175: break;
        case 41: 
          { yybegin(LONG_COMMENT);
          }
        case 176: break;
        case 82: 
          { return symbol(CompilerSymbol.BREAK);
          }
        case 177: break;
        case 80: 
          { return symbol(CompilerSymbol.CHARACTER, '\'');
          }
        case 178: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case LONG_COMMENT: {
              yybegin(YYINITIAL);
   compilation.lexicalError("End of file reached while parsing a multiline comment. You forgot to close it with '*/'.", yyline, yycolumn);
            }
            case 169: break;
            case STRING: {
              yybegin(YYINITIAL); 
	 	 compilation.lexicalError("End of file reached while parsing a string. You forgot to close the double quotes.", yyline, yycolumn);
	 	 return symbol(CompilerSymbol.STRING, stringBeingBuilt);
            }
            case 170: break;
            default:
              { return new java_cup.runtime.Symbol(CompilerSymbol.EOF); }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
