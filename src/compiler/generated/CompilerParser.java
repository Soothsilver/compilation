
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 25 02:01:57 CET 2015
//----------------------------------------------------

package compiler.generated;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import compiler.*;
import compiler.nodes.*;
import compiler.nodes.statements.*;
import compiler.nodes.declarations.*;
import compiler.nodes.expressions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 25 02:01:57 CET 2015
  */
public class CompilerParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompilerParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\007\003\000\002\007\004\000\002\010\003" +
    "\000\002\010\003\000\002\012\004\000\002\011\004\000" +
    "\002\013\007\000\002\013\006\000\002\013\012\000\002" +
    "\013\011\000\002\014\011\000\002\014\010\000\002\014" +
    "\014\000\002\014\013\000\002\015\003\000\002\015\005" +
    "\000\002\016\005\000\002\027\006\000\002\030\004\000" +
    "\002\030\002\000\002\031\003\000\002\031\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\034" +
    "\007\000\002\035\011\000\002\036\004\000\002\036\004" +
    "\000\002\036\004\000\002\033\004\000\002\033\011\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\004\000\002\037\003\000\002\037\004\000\002\037" +
    "\003\000\002\037\003\000\002\040\011\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\042\010\000" +
    "\002\043\006\000\002\044\014\000\002\023\003\000\002" +
    "\023\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\020\005\000\002\021\006\000\002\021\011" +
    "\000\002\022\007\000\002\022\012\000\002\024\006\000" +
    "\002\025\003\000\002\025\005\000\002\026\003\000\002" +
    "\026\005\000\002\003\004\000\002\003\002\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\051\004" +
    "\000\002\051\002\000\002\052\003\000\002\005\007\000" +
    "\002\006\006\000\002\045\003\000\002\045\005\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\050\005\000\002\050\007" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\046\003\000" +
    "\002\053\005\000\002\053\003\000\002\054\005\000\002" +
    "\054\003\000\002\055\005\000\002\055\003\000\002\056" +
    "\003\000\002\056\005\000\002\057\003\000\002\057\005" +
    "\000\002\060\003\000\002\060\005\000\002\061\005\000" +
    "\002\061\005\000\002\061\003\000\002\062\005\000\002" +
    "\062\003\000\002\063\005\000\002\063\005\000\002\063" +
    "\003\000\002\064\005\000\002\064\005\000\002\064\005" +
    "\000\002\064\003\000\002\065\005\000\002\065\005\000" +
    "\002\065\005\000\002\065\003\000\002\066\004\000\002" +
    "\066\004\000\002\066\004\000\002\066\004\000\002\066" +
    "\004\000\002\066\004\000\002\066\003\000\002\067\003" +
    "\000\002\067\005\000\002\067\006\000\002\067\011\000" +
    "\002\067\010\000\002\067\005\000\002\067\006\000\002" +
    "\067\004\000\002\067\004\000\002\071\003\000\002\071" +
    "\005\000\002\070\005\000\002\070\003\000\002\070\006" +
    "\000\002\070\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\016\002\uffbf\003\uffbf\062\uffbf\063\uffbf\070" +
    "\uffbf\104\uffbf\001\002\000\004\002\u0128\001\002\000\016" +
    "\002\uffff\003\015\062\011\063\021\070\013\104\017\001" +
    "\002\000\012\002\ufffb\047\ufffb\062\ufffb\063\ufffb\001\002" +
    "\000\004\046\075\001\002\000\010\002\000\062\011\063" +
    "\021\001\002\000\004\104\u011b\001\002\000\012\002\ufffc" +
    "\047\ufffc\062\ufffc\063\ufffc\001\002\000\004\104\376\001" +
    "\002\000\016\002\uffc0\003\uffc0\062\uffc0\063\uffc0\070\uffc0" +
    "\104\uffc0\001\002\000\004\055\375\001\002\000\016\002" +
    "\uffbe\003\uffbe\062\uffbe\063\uffbe\070\uffbe\104\uffbe\001\002" +
    "\000\004\054\171\001\002\000\004\046\075\001\002\000" +
    "\004\104\024\001\002\000\016\002\uffbd\003\uffbd\062\uffbd" +
    "\063\uffbd\070\uffbd\104\uffbd\001\002\000\012\002\ufffe\047" +
    "\ufffe\062\ufffe\063\ufffe\001\002\000\006\050\025\060\026" +
    "\001\002\000\006\051\067\104\035\001\002\000\004\104" +
    "\030\001\002\000\006\056\031\061\032\001\002\000\006" +
    "\056\uffc2\061\uffc2\001\002\000\004\104\065\001\002\000" +
    "\004\050\033\001\002\000\006\051\036\104\035\001\002" +
    "\000\006\051\061\056\060\001\002\000\004\054\056\001" +
    "\002\000\004\054\040\001\002\000\006\051\ufff0\056\ufff0" +
    "\001\002\000\006\064\041\104\044\001\002\000\004\065" +
    "\054\001\002\000\014\046\uffcc\051\uffcc\055\uffcc\056\uffcc" +
    "\061\uffcc\001\002\000\004\046\ufff1\001\002\000\016\046" +
    "\uffcd\051\uffcd\055\uffcd\056\uffcd\060\046\061\uffcd\001\002" +
    "\000\014\046\uffcb\051\uffcb\055\uffcb\056\uffcb\061\uffcb\001" +
    "\002\000\006\064\041\104\044\001\002\000\006\056\051" +
    "\061\052\001\002\000\006\056\uffc4\061\uffc4\001\002\000" +
    "\006\064\041\104\044\001\002\000\014\046\uffc5\051\uffc5" +
    "\055\uffc5\056\uffc5\061\uffc5\001\002\000\006\056\uffc3\061" +
    "\uffc3\001\002\000\006\064\041\104\044\001\002\000\014" +
    "\046\uffca\051\uffca\055\uffca\056\uffca\061\uffca\001\002\000" +
    "\006\064\041\104\044\001\002\000\006\051\uffee\056\uffee" +
    "\001\002\000\004\104\035\001\002\000\004\054\062\001" +
    "\002\000\006\064\041\104\044\001\002\000\004\046\ufff2" +
    "\001\002\000\006\051\uffef\056\uffef\001\002\000\006\056" +
    "\uffc1\061\uffc1\001\002\000\006\051\072\056\060\001\002" +
    "\000\004\054\070\001\002\000\006\064\041\104\044\001" +
    "\002\000\004\046\ufff3\001\002\000\004\054\073\001\002" +
    "\000\006\064\041\104\044\001\002\000\004\046\ufff4\001" +
    "\002\000\064\003\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\046\uffba\047\uffba\050\uffba\052\uffba\071" +
    "\uffba\072\uffba\073\uffba\074\uffba\076\uffba\077\uffba\101\uffba" +
    "\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107\uffba\110" +
    "\uffba\001\002\000\012\002\ufffa\047\ufffa\062\ufffa\063\ufffa" +
    "\001\002\000\064\003\140\037\102\040\113\041\164\042" +
    "\126\043\115\044\127\046\075\047\uffeb\050\157\052\101" +
    "\071\134\072\151\073\143\074\131\076\145\077\114\101" +
    "\154\102\107\103\137\104\170\105\106\106\155\107\121" +
    "\110\160\001\002\000\064\003\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\052\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\076\uffe9\077" +
    "\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9" +
    "\107\uffe9\110\uffe9\001\002\000\036\037\102\040\113\041" +
    "\164\042\126\043\115\044\127\050\157\052\101\103\137" +
    "\104\177\105\106\106\155\107\121\110\160\001\002\000" +
    "\036\037\102\040\113\041\164\042\126\043\115\044\127" +
    "\050\157\052\101\103\137\104\177\105\106\106\155\107" +
    "\121\110\160\001\002\000\064\003\uffea\037\uffea\040\uffea" +
    "\041\uffea\042\uffea\043\uffea\044\uffea\046\uffea\047\uffea\050" +
    "\uffea\052\uffea\071\uffea\072\uffea\073\uffea\074\uffea\076\uffea" +
    "\077\uffea\101\uffea\102\uffea\103\uffea\104\uffea\105\uffea\106" +
    "\uffea\107\uffea\110\uffea\001\002\000\004\047\371\001\002" +
    "\000\052\015\uff95\016\uff95\017\244\020\uff95\021\uff95\024" +
    "\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95" +
    "\033\uff95\034\uff95\035\uff95\036\uff95\051\uff95\053\uff95\055" +
    "\uff95\056\uff95\001\002\000\116\004\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\051\uffb4\052\uffb4\053\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\001\002\000\062\003\140\037\102" +
    "\040\113\041\164\042\126\043\115\044\127\046\075\050" +
    "\157\052\101\071\134\072\151\073\143\074\131\076\145" +
    "\077\114\101\154\102\107\103\137\104\177\105\106\106" +
    "\155\107\121\110\160\001\002\000\004\055\362\001\002" +
    "\000\066\003\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\046\uffde\047\uffde\050\uffde\052\uffde\071\uffde" +
    "\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde\101" +
    "\uffde\102\uffde\103\uffde\104\uffde\105\uffde\106\uffde\107\uffde" +
    "\110\uffde\001\002\000\042\016\346\024\350\025\356\026" +
    "\357\027\351\030\355\031\343\032\347\033\344\034\352" +
    "\035\354\036\345\051\uff9c\053\uff9c\055\uff9c\056\uff9c\001" +
    "\002\000\036\037\102\040\113\041\164\042\126\043\115" +
    "\044\127\050\157\052\101\103\137\104\177\105\106\106" +
    "\155\107\121\110\160\001\002\000\004\050\331\001\002" +
    "\000\036\037\102\040\113\041\164\042\126\043\115\044" +
    "\127\050\157\052\101\103\137\104\177\105\106\106\155" +
    "\107\121\110\160\001\002\000\064\003\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\052\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\076" +
    "\uffe6\077\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6" +
    "\106\uffe6\107\uffe6\110\uffe6\001\002\000\106\004\203\005" +
    "\202\006\201\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86" +
    "\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022" +
    "\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86" +
    "\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\043" +
    "\uff86\044\uff86\045\uff86\051\uff86\053\uff86\055\uff86\056\uff86" +
    "\001\002\000\066\003\uffdc\037\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\052\uffdc" +
    "\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077" +
    "\uffdc\101\uffdc\102\uffdc\103\uffdc\104\uffdc\105\uffdc\106\uffdc" +
    "\107\uffdc\110\uffdc\001\002\000\116\004\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\001\002\000\012\051\uff9e\053" +
    "\uff9e\055\uff9e\056\uff9e\001\002\000\070\003\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\052\uffb9\062\uffb9\063\uffb9\071\uffb9\072\uffb9" +
    "\073\uffb9\074\uffb9\076\uffb9\077\uffb9\101\uffb9\102\uffb9\103" +
    "\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\001\002" +
    "\000\072\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\230" +
    "\023\227\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031" +
    "\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\051\uff8d" +
    "\053\uff8d\055\uff8d\056\uff8d\001\002\000\062\003\140\037" +
    "\102\040\113\041\164\042\126\043\115\044\127\046\075" +
    "\050\157\052\101\071\134\072\151\073\143\074\131\076" +
    "\145\077\114\101\154\102\107\103\137\104\177\105\106" +
    "\106\155\107\121\110\160\001\002\000\036\037\102\040" +
    "\113\041\164\042\126\043\115\044\127\050\157\052\101" +
    "\103\137\104\177\105\106\106\155\107\121\110\160\001" +
    "\002\000\036\037\102\040\113\041\164\042\126\043\115" +
    "\044\127\050\157\052\101\103\137\104\177\105\106\106" +
    "\155\107\121\110\160\001\002\000\064\003\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\052\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8" +
    "\076\uffe8\077\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8\105" +
    "\uffe8\106\uffe8\107\uffe8\110\uffe8\001\002\000\004\050\314" +
    "\001\002\000\004\055\uffda\001\002\000\064\003\140\037" +
    "\102\040\113\041\164\042\126\043\115\044\127\046\075" +
    "\047\uffeb\050\157\052\101\071\134\072\151\073\143\074" +
    "\131\076\145\077\114\101\154\102\107\103\137\104\177" +
    "\105\106\106\155\107\121\110\160\001\002\000\036\037" +
    "\102\040\113\041\164\042\126\043\115\044\127\050\157" +
    "\052\101\103\137\104\177\105\106\106\155\107\121\110" +
    "\160\001\002\000\106\004\uff82\005\uff82\006\uff82\007\uff82" +
    "\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016" +
    "\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82" +
    "\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033" +
    "\uff82\034\uff82\035\uff82\036\uff82\043\uff82\044\uff82\045\uff82" +
    "\051\uff82\053\uff82\055\uff82\056\uff82\001\002\000\046\015" +
    "\uff98\016\uff98\020\240\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\051\uff98\053\uff98\055\uff98\056\uff98\001\002\000\004" +
    "\104\304\001\002\000\004\055\303\001\002\000\066\007" +
    "\224\010\223\011\225\012\221\013\uff8f\014\uff8f\015\uff8f" +
    "\016\uff8f\017\uff8f\020\uff8f\021\uff8f\024\uff8f\025\uff8f\026" +
    "\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\051\uff8f\053\uff8f\055\uff8f\056\uff8f\001" +
    "\002\000\116\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e" +
    "\011\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\017" +
    "\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e" +
    "\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034" +
    "\uff6e\035\uff6e\036\uff6e\037\uff6e\040\uff6e\043\uff6e\044\uff6e" +
    "\045\uff6e\051\uff6e\052\uff6e\053\uff6e\055\uff6e\056\uff6e\057" +
    "\uff6e\001\002\000\004\055\uffd7\001\002\000\050\015\uff97" +
    "\016\uff97\020\uff97\021\242\024\uff97\025\uff97\026\uff97\027" +
    "\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97" +
    "\036\uff97\051\uff97\053\uff97\055\uff97\056\uff97\001\002\000" +
    "\004\050\276\001\002\000\116\004\uff7b\005\uff7b\006\uff7b" +
    "\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015" +
    "\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b" +
    "\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032" +
    "\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037\270\040\267" +
    "\043\uff7b\044\uff7b\045\uff7b\051\uff7b\052\272\053\uff7b\055" +
    "\uff7b\056\uff7b\057\271\001\002\000\006\050\251\060\252" +
    "\001\002\000\116\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\051\uffb0\052\uffb0\053\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\001\002\000\004\055\uffd8\001\002\000\064\003" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\052\uffe7\071\uffe7\072\uffe7\073" +
    "\uffe7\074\uffe7\076\uffe7\077\uffe7\101\uffe7\102\uffe7\103\uffe7" +
    "\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\001\002\000" +
    "\116\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a" +
    "\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020" +
    "\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a" +
    "\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035" +
    "\uff7a\036\uff7a\037\uff7a\040\uff7a\043\uff7a\044\uff7a\045\uff7a" +
    "\051\uff7a\052\uff7a\053\uff7a\055\uff7a\056\uff7a\057\uff7a\001" +
    "\002\000\004\050\246\001\002\000\116\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\043\uffb3\044\uffb3\045\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\001\002\000\044\015\236" +
    "\016\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\051\uff9a" +
    "\053\uff9a\055\uff9a\056\uff9a\001\002\000\036\037\102\040" +
    "\113\041\164\042\126\043\115\044\127\050\157\052\101" +
    "\103\137\104\177\105\106\106\155\107\121\110\160\001" +
    "\002\000\116\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\051\uffb2\052\uffb2\053\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\001\002\000\066\003\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\046\uffdd\047\uffdd\050\uffdd\052" +
    "\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd" +
    "\077\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106" +
    "\uffdd\107\uffdd\110\uffdd\001\002\000\056\013\217\014\216" +
    "\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\024\uff93\025" +
    "\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\051\uff93\053\uff93\055\uff93\056" +
    "\uff93\001\002\000\070\003\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\046\uffbb\047\uffbb\050\uffbb\052" +
    "\uffbb\062\uffbb\063\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb" +
    "\076\uffbb\077\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105" +
    "\uffbb\106\uffbb\107\uffbb\110\uffbb\001\002\000\036\037\102" +
    "\040\113\041\164\042\126\043\115\044\127\050\157\052" +
    "\101\103\137\104\177\105\106\106\155\107\121\110\160" +
    "\001\002\000\062\003\140\037\102\040\113\041\164\042" +
    "\126\043\115\044\127\046\075\050\157\052\101\071\134" +
    "\072\151\073\143\074\131\076\145\077\114\101\154\102" +
    "\107\103\137\104\177\105\106\106\155\107\121\110\160" +
    "\001\002\000\062\003\140\037\102\040\113\041\164\042" +
    "\126\043\115\044\127\046\075\050\157\052\101\071\134" +
    "\072\151\073\143\074\131\076\145\077\114\101\154\102" +
    "\107\103\137\104\177\105\106\106\155\107\121\110\160" +
    "\001\002\000\100\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a" +
    "\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030" +
    "\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a" +
    "\043\175\044\174\045\176\051\uff8a\053\uff8a\055\uff8a\056" +
    "\uff8a\001\002\000\116\004\uff6c\005\uff6c\006\uff6c\007\uff6c" +
    "\010\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\016" +
    "\uff6c\017\uff6c\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c" +
    "\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033" +
    "\uff6c\034\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\043\uff6c" +
    "\044\uff6c\045\uff6c\050\uff71\052\uff6c\054\171\055\uff6c\057" +
    "\uff6c\060\uff71\001\002\000\006\064\041\104\044\001\002" +
    "\000\004\055\173\001\002\000\074\002\uffb7\003\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\046\uffb7" +
    "\047\uffb7\050\uffb7\052\uffb7\062\uffb7\063\uffb7\070\uffb7\071" +
    "\uffb7\072\uffb7\073\uffb7\074\uffb7\076\uffb7\077\uffb7\101\uffb7" +
    "\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110" +
    "\uffb7\001\002\000\036\037\102\040\113\041\164\042\126" +
    "\043\115\044\127\050\157\052\101\103\137\104\177\105" +
    "\106\106\155\107\121\110\160\001\002\000\036\037\102" +
    "\040\113\041\164\042\126\043\115\044\127\050\157\052" +
    "\101\103\137\104\177\105\106\106\155\107\121\110\160" +
    "\001\002\000\036\037\102\040\113\041\164\042\126\043" +
    "\115\044\127\050\157\052\101\103\137\104\177\105\106" +
    "\106\155\107\121\110\160\001\002\000\122\004\uff6c\005" +
    "\uff6c\006\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c\013\uff6c" +
    "\014\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c\022" +
    "\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c" +
    "\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c\037" +
    "\uff6c\040\uff6c\043\uff6c\044\uff6c\045\uff6c\050\uff71\051\uff6c" +
    "\052\uff6c\053\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff71\001" +
    "\002\000\106\004\203\005\202\006\201\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017" +
    "\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87" +
    "\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034" +
    "\uff87\035\uff87\036\uff87\043\uff87\044\uff87\045\uff87\051\uff87" +
    "\053\uff87\055\uff87\056\uff87\001\002\000\036\037\102\040" +
    "\113\041\164\042\126\043\115\044\127\050\157\052\101" +
    "\103\137\104\177\105\106\106\155\107\121\110\160\001" +
    "\002\000\036\037\102\040\113\041\164\042\126\043\115" +
    "\044\127\050\157\052\101\103\137\104\177\105\106\106" +
    "\155\107\121\110\160\001\002\000\036\037\102\040\113" +
    "\041\164\042\126\043\115\044\127\050\157\052\101\103" +
    "\137\104\177\105\106\106\155\107\121\110\160\001\002" +
    "\000\106\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011" +
    "\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85" +
    "\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026" +
    "\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85" +
    "\035\uff85\036\uff85\043\uff85\044\uff85\045\uff85\051\uff85\053" +
    "\uff85\055\uff85\056\uff85\001\002\000\106\004\uff84\005\uff84" +
    "\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014" +
    "\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84" +
    "\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031" +
    "\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\043\uff84" +
    "\044\uff84\045\uff84\051\uff84\053\uff84\055\uff84\056\uff84\001" +
    "\002\000\106\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83" +
    "\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83\017" +
    "\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034" +
    "\uff83\035\uff83\036\uff83\043\uff83\044\uff83\045\uff83\051\uff83" +
    "\053\uff83\055\uff83\056\uff83\001\002\000\106\004\203\005" +
    "\202\006\201\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89" +
    "\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022" +
    "\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89" +
    "\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\043" +
    "\uff89\044\uff89\045\uff89\051\uff89\053\uff89\055\uff89\056\uff89" +
    "\001\002\000\106\004\203\005\202\006\201\007\uff88\010" +
    "\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88" +
    "\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025" +
    "\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88" +
    "\034\uff88\035\uff88\036\uff88\043\uff88\044\uff88\045\uff88\051" +
    "\uff88\053\uff88\055\uff88\056\uff88\001\002\000\066\003\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\052\uffd5\071\uffd5\072\uffd5\073\uffd5" +
    "\074\uffd5\075\uffd5\076\uffd5\077\uffd5\101\uffd5\102\uffd5\103" +
    "\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5\001\002" +
    "\000\064\003\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\052\uffe3\071\uffe3" +
    "\072\uffe3\073\uffe3\074\uffe3\076\uffe3\077\uffe3\101\uffe3\102" +
    "\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3" +
    "\001\002\000\066\003\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\046\uffd4\047\uffd4\050\uffd4\052\uffd4" +
    "\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077" +
    "\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4\105\uffd4\106\uffd4" +
    "\107\uffd4\110\uffd4\001\002\000\064\003\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\052\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\076" +
    "\uffe2\077\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2" +
    "\106\uffe2\107\uffe2\110\uffe2\001\002\000\106\004\uff7f\005" +
    "\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f" +
    "\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022" +
    "\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f" +
    "\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\043" +
    "\uff7f\044\uff7f\045\uff7f\051\uff7f\053\uff7f\055\uff7f\056\uff7f" +
    "\001\002\000\036\037\102\040\113\041\164\042\126\043" +
    "\115\044\127\050\157\052\101\103\137\104\177\105\106" +
    "\106\155\107\121\110\160\001\002\000\036\037\102\040" +
    "\113\041\164\042\126\043\115\044\127\050\157\052\101" +
    "\103\137\104\177\105\106\106\155\107\121\110\160\001" +
    "\002\000\066\007\224\010\223\011\225\012\221\013\uff91" +
    "\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\024" +
    "\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91" +
    "\033\uff91\034\uff91\035\uff91\036\uff91\051\uff91\053\uff91\055" +
    "\uff91\056\uff91\001\002\000\036\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\050\uff9f\052\uff9f\103\uff9f\104" +
    "\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f\001\002\000\036" +
    "\037\102\040\113\041\164\042\126\043\115\044\127\050" +
    "\157\052\101\103\137\104\177\105\106\106\155\107\121" +
    "\110\160\001\002\000\036\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\044\uffa0\050\uffa0\052\uffa0\103\uffa0\104\uffa0" +
    "\105\uffa0\106\uffa0\107\uffa0\110\uffa0\001\002\000\036\037" +
    "\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\050\uffa2" +
    "\052\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110" +
    "\uffa2\001\002\000\036\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\050\uffa1\052\uffa1\103\uffa1\104\uffa1\105" +
    "\uffa1\106\uffa1\107\uffa1\110\uffa1\001\002\000\072\007\uff8e" +
    "\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\230\023\227\024\uff8e" +
    "\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033" +
    "\uff8e\034\uff8e\035\uff8e\036\uff8e\051\uff8e\053\uff8e\055\uff8e" +
    "\056\uff8e\001\002\000\036\037\102\040\113\041\164\042" +
    "\126\043\115\044\127\050\157\052\101\103\137\104\177" +
    "\105\106\106\155\107\121\110\160\001\002\000\036\037" +
    "\102\040\113\041\164\042\126\043\115\044\127\050\157" +
    "\052\101\103\137\104\177\105\106\106\155\107\121\110" +
    "\160\001\002\000\100\007\uff8c\010\uff8c\011\uff8c\012\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c" +
    "\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036" +
    "\uff8c\043\175\044\174\045\176\051\uff8c\053\uff8c\055\uff8c" +
    "\056\uff8c\001\002\000\100\007\uff8b\010\uff8b\011\uff8b\012" +
    "\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b" +
    "\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027" +
    "\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b" +
    "\036\uff8b\043\175\044\174\045\176\051\uff8b\053\uff8b\055" +
    "\uff8b\056\uff8b\001\002\000\066\007\224\010\223\011\225" +
    "\012\221\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020" +
    "\uff90\021\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90" +
    "\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\051" +
    "\uff90\053\uff90\055\uff90\056\uff90\001\002\000\004\051\235" +
    "\001\002\000\116\004\uff6f\005\uff6f\006\uff6f\007\uff6f\010" +
    "\uff6f\011\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f" +
    "\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025" +
    "\uff6f\026\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f" +
    "\034\uff6f\035\uff6f\036\uff6f\037\uff6f\040\uff6f\043\uff6f\044" +
    "\uff6f\045\uff6f\051\uff6f\052\uff6f\053\uff6f\055\uff6f\056\uff6f" +
    "\057\uff6f\001\002\000\036\037\102\040\113\041\164\042" +
    "\126\043\115\044\127\050\157\052\101\103\137\104\177" +
    "\105\106\106\155\107\121\110\160\001\002\000\046\015" +
    "\uff99\016\uff99\020\240\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036" +
    "\uff99\051\uff99\053\uff99\055\uff99\056\uff99\001\002\000\036" +
    "\037\102\040\113\041\164\042\126\043\115\044\127\050" +
    "\157\052\101\103\137\104\177\105\106\106\155\107\121" +
    "\110\160\001\002\000\050\015\uff96\016\uff96\020\uff96\021" +
    "\242\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96" +
    "\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\051\uff96\053" +
    "\uff96\055\uff96\056\uff96\001\002\000\036\037\102\040\113" +
    "\041\164\042\126\043\115\044\127\050\157\052\101\103" +
    "\137\104\177\105\106\106\155\107\121\110\160\001\002" +
    "\000\052\015\uff94\016\uff94\017\244\020\uff94\021\uff94\024" +
    "\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94" +
    "\033\uff94\034\uff94\035\uff94\036\uff94\051\uff94\053\uff94\055" +
    "\uff94\056\uff94\001\002\000\036\037\102\040\113\041\164" +
    "\042\126\043\115\044\127\050\157\052\101\103\137\104" +
    "\177\105\106\106\155\107\121\110\160\001\002\000\056" +
    "\013\217\014\216\015\uff92\016\uff92\017\uff92\020\uff92\021" +
    "\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\051\uff92\053" +
    "\uff92\055\uff92\056\uff92\001\002\000\036\037\102\040\113" +
    "\041\164\042\126\043\115\044\127\050\157\052\101\103" +
    "\137\104\177\105\106\106\155\107\121\110\160\001\002" +
    "\000\004\051\250\001\002\000\062\003\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\046\uffd1\050\uffd1" +
    "\052\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\076\uffd1\077" +
    "\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1" +
    "\107\uffd1\110\uffd1\001\002\000\040\037\102\040\113\041" +
    "\164\042\126\043\115\044\127\050\157\051\264\052\101" +
    "\103\137\104\177\105\106\106\155\107\121\110\160\001" +
    "\002\000\006\064\041\104\044\001\002\000\006\056\051" +
    "\061\254\001\002\000\004\050\255\001\002\000\040\037" +
    "\102\040\113\041\164\042\126\043\115\044\127\050\157" +
    "\051\257\052\101\103\137\104\177\105\106\106\155\107" +
    "\121\110\160\001\002\000\010\051\uffb6\053\uffb6\056\uffb6" +
    "\001\002\000\116\004\uff76\005\uff76\006\uff76\007\uff76\010" +
    "\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76\016\uff76" +
    "\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025" +
    "\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76" +
    "\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\043\uff76\044" +
    "\uff76\045\uff76\051\uff76\052\uff76\053\uff76\055\uff76\056\uff76" +
    "\057\uff76\001\002\000\006\051\262\056\261\001\002\000" +
    "\036\037\102\040\113\041\164\042\126\043\115\044\127" +
    "\050\157\052\101\103\137\104\177\105\106\106\155\107" +
    "\121\110\160\001\002\000\116\004\uff77\005\uff77\006\uff77" +
    "\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77\015" +
    "\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77\023\uff77" +
    "\024\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032" +
    "\uff77\033\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77" +
    "\043\uff77\044\uff77\045\uff77\051\uff77\052\uff77\053\uff77\055" +
    "\uff77\056\uff77\057\uff77\001\002\000\010\051\uffb5\053\uffb5" +
    "\056\uffb5\001\002\000\116\004\uff79\005\uff79\006\uff79\007" +
    "\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79\015\uff79" +
    "\016\uff79\017\uff79\020\uff79\021\uff79\022\uff79\023\uff79\024" +
    "\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79" +
    "\033\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79\043" +
    "\uff79\044\uff79\045\uff79\051\uff79\052\uff79\053\uff79\055\uff79" +
    "\056\uff79\057\uff79\001\002\000\006\051\266\056\261\001" +
    "\002\000\116\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78" +
    "\011\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016\uff78\017" +
    "\uff78\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025\uff78" +
    "\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034" +
    "\uff78\035\uff78\036\uff78\037\uff78\040\uff78\043\uff78\044\uff78" +
    "\045\uff78\051\uff78\052\uff78\053\uff78\055\uff78\056\uff78\057" +
    "\uff78\001\002\000\116\004\uff72\005\uff72\006\uff72\007\uff72" +
    "\010\uff72\011\uff72\012\uff72\013\uff72\014\uff72\015\uff72\016" +
    "\uff72\017\uff72\020\uff72\021\uff72\022\uff72\023\uff72\024\uff72" +
    "\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033" +
    "\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\043\uff72" +
    "\044\uff72\045\uff72\051\uff72\052\uff72\053\uff72\055\uff72\056" +
    "\uff72\057\uff72\001\002\000\116\004\uff73\005\uff73\006\uff73" +
    "\007\uff73\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73\015" +
    "\uff73\016\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73" +
    "\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032" +
    "\uff73\033\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73" +
    "\043\uff73\044\uff73\045\uff73\051\uff73\052\uff73\053\uff73\055" +
    "\uff73\056\uff73\057\uff73\001\002\000\004\104\275\001\002" +
    "\000\036\037\102\040\113\041\164\042\126\043\115\044" +
    "\127\050\157\052\101\103\137\104\177\105\106\106\155" +
    "\107\121\110\160\001\002\000\004\053\274\001\002\000" +
    "\116\004\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011\uff74" +
    "\012\uff74\013\uff74\014\uff74\015\uff74\016\uff74\017\uff74\020" +
    "\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\026\uff74" +
    "\027\uff74\030\uff74\031\uff74\032\uff74\033\uff74\034\uff74\035" +
    "\uff74\036\uff74\037\uff74\040\uff74\043\uff74\044\uff74\045\uff74" +
    "\051\uff74\052\uff74\053\uff74\055\uff74\056\uff74\057\uff74\001" +
    "\002\000\122\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75" +
    "\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75\017" +
    "\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75" +
    "\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034" +
    "\uff75\035\uff75\036\uff75\037\uff75\040\uff75\043\uff75\044\uff75" +
    "\045\uff75\050\uff70\051\uff75\052\uff75\053\uff75\055\uff75\056" +
    "\uff75\057\uff75\060\uff70\001\002\000\004\104\277\001\002" +
    "\000\004\100\300\001\002\000\036\037\102\040\113\041" +
    "\164\042\126\043\115\044\127\050\157\052\101\103\137" +
    "\104\177\105\106\106\155\107\121\110\160\001\002\000" +
    "\004\051\302\001\002\000\062\003\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2\050\uffd2\052" +
    "\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\076\uffd2\077\uffd2" +
    "\101\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\106\uffd2\107" +
    "\uffd2\110\uffd2\001\002\000\066\003\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\052\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb" +
    "\076\uffdb\077\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\105" +
    "\uffdb\106\uffdb\107\uffdb\110\uffdb\001\002\000\006\050\305" +
    "\052\306\001\002\000\004\051\311\001\002\000\004\105" +
    "\307\001\002\000\004\053\310\001\002\000\116\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae" +
    "\037\uffae\040\uffae\043\uffae\044\uffae\045\uffae\051\uffae\052" +
    "\uffae\053\uffae\055\uffae\056\uffae\057\uffae\001\002\000\116" +
    "\004\uff6d\005\uff6d\006\uff6d\007\uff6d\010\uff6d\011\uff6d\012" +
    "\uff6d\013\uff6d\014\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d" +
    "\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027" +
    "\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d" +
    "\036\uff6d\037\uff6d\040\uff6d\043\uff6d\044\uff6d\045\uff6d\051" +
    "\uff6d\052\uff6d\053\uff6d\055\uff6d\056\uff6d\057\uff6d\001\002" +
    "\000\004\055\uffd9\001\002\000\004\047\uffec\001\002\000" +
    "\036\037\102\040\113\041\164\042\126\043\115\044\127" +
    "\050\157\052\101\103\137\104\177\105\106\106\155\107" +
    "\121\110\160\001\002\000\004\051\316\001\002\000\062" +
    "\003\140\037\102\040\113\041\164\042\126\043\115\044" +
    "\127\046\075\050\157\052\101\071\134\072\151\073\143" +
    "\074\131\076\145\077\114\101\154\102\107\103\137\104" +
    "\177\105\106\106\155\107\121\110\160\001\002\000\066" +
    "\003\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\052\uffe9\071\uffe9\072\uffe9" +
    "\073\uffe9\074\uffe9\075\321\076\uffe9\077\uffe9\101\uffe9\102" +
    "\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\110\uffe9" +
    "\001\002\000\064\003\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5\052\uffe5" +
    "\071\uffe5\072\uffe5\073\uffe5\074\uffe5\076\uffe5\077\uffe5\101" +
    "\uffe5\102\uffe5\103\uffe5\104\uffe5\105\uffe5\106\uffe5\107\uffe5" +
    "\110\uffe5\001\002\000\062\003\140\037\102\040\113\041" +
    "\164\042\126\043\115\044\127\046\075\050\157\052\101" +
    "\071\134\072\151\073\143\074\131\076\145\077\114\101" +
    "\154\102\107\103\137\104\177\105\106\106\155\107\121" +
    "\110\160\001\002\000\066\003\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\052\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076" +
    "\uffd6\077\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6" +
    "\106\uffd6\107\uffd6\110\uffd6\001\002\000\064\003\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\052\uffe4\071\uffe4\072\uffe4\073\uffe4\074" +
    "\uffe4\076\uffe4\077\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4" +
    "\105\uffe4\106\uffe4\107\uffe4\110\uffe4\001\002\000\106\004" +
    "\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d" +
    "\013\uff7d\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021" +
    "\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d" +
    "\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036" +
    "\uff7d\043\uff7d\044\uff7d\045\uff7d\051\uff7d\053\uff7d\055\uff7d" +
    "\056\uff7d\001\002\000\106\004\uff7e\005\uff7e\006\uff7e\007" +
    "\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e" +
    "\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\024" +
    "\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e" +
    "\033\uff7e\034\uff7e\035\uff7e\036\uff7e\043\uff7e\044\uff7e\045" +
    "\uff7e\051\uff7e\053\uff7e\055\uff7e\056\uff7e\001\002\000\066" +
    "\003\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\052\uffd3\071\uffd3\072\uffd3" +
    "\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\101\uffd3\102" +
    "\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\110\uffd3" +
    "\001\002\000\064\003\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1\052\uffe1" +
    "\071\uffe1\072\uffe1\073\uffe1\074\uffe1\076\uffe1\077\uffe1\101" +
    "\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\106\uffe1\107\uffe1" +
    "\110\uffe1\001\002\000\106\004\uff7c\005\uff7c\006\uff7c\007" +
    "\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c" +
    "\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024" +
    "\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c" +
    "\033\uff7c\034\uff7c\035\uff7c\036\uff7c\043\uff7c\044\uff7c\045" +
    "\uff7c\051\uff7c\053\uff7c\055\uff7c\056\uff7c\001\002\000\004" +
    "\104\332\001\002\000\004\024\333\001\002\000\036\037" +
    "\102\040\113\041\164\042\126\043\115\044\127\050\157" +
    "\052\101\103\137\104\177\105\106\106\155\107\121\110" +
    "\160\001\002\000\004\055\335\001\002\000\036\037\102" +
    "\040\113\041\164\042\126\043\115\044\127\050\157\052" +
    "\101\103\137\104\177\105\106\106\155\107\121\110\160" +
    "\001\002\000\004\055\337\001\002\000\036\037\102\040" +
    "\113\041\164\042\126\043\115\044\127\050\157\052\101" +
    "\103\137\104\177\105\106\106\155\107\121\110\160\001" +
    "\002\000\004\051\341\001\002\000\062\003\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\046\uffd0\050" +
    "\uffd0\052\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\076\uffd0" +
    "\077\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106" +
    "\uffd0\107\uffd0\110\uffd0\001\002\000\106\004\uff80\005\uff80" +
    "\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80\014" +
    "\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80" +
    "\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031" +
    "\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80\043\uff80" +
    "\044\uff80\045\uff80\051\uff80\053\uff80\055\uff80\056\uff80\001" +
    "\002\000\036\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\050\uffa9\052\uffa9\103\uffa9\104\uffa9\105\uffa9\106" +
    "\uffa9\107\uffa9\110\uffa9\001\002\000\036\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\050\uffa7\052\uffa7\103" +
    "\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\001\002" +
    "\000\036\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\050\uffa4\052\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4" +
    "\107\uffa4\110\uffa4\001\002\000\036\037\102\040\113\041" +
    "\164\042\126\043\115\044\127\050\157\052\101\103\137" +
    "\104\177\105\106\106\155\107\121\110\160\001\002\000" +
    "\036\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\050\uffa8\052\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107" +
    "\uffa8\110\uffa8\001\002\000\036\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\050\uffa3\052\uffa3\103\uffa3\104" +
    "\uffa3\105\uffa3\106\uffa3\107\uffa3\110\uffa3\001\002\000\036" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\050" +
    "\uffab\052\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab" +
    "\110\uffab\001\002\000\036\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\050\uffa6\052\uffa6\103\uffa6\104\uffa6" +
    "\105\uffa6\106\uffa6\107\uffa6\110\uffa6\001\002\000\036\037" +
    "\102\040\113\041\164\042\126\043\115\044\127\050\157" +
    "\052\101\103\137\104\177\105\106\106\155\107\121\110" +
    "\160\001\002\000\036\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\050\uffa5\052\uffa5\103\uffa5\104\uffa5\105" +
    "\uffa5\106\uffa5\107\uffa5\110\uffa5\001\002\000\036\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\050\uffaa\052" +
    "\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa" +
    "\001\002\000\036\037\uffad\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\050\uffad\052\uffad\103\uffad\104\uffad\105\uffad" +
    "\106\uffad\107\uffad\110\uffad\001\002\000\036\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\050\uffac\052\uffac" +
    "\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac\110\uffac\001" +
    "\002\000\012\051\uff9d\053\uff9d\055\uff9d\056\uff9d\001\002" +
    "\000\044\015\236\016\uff9b\024\uff9b\025\uff9b\026\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\051\uff9b\053\uff9b\055\uff9b\056\uff9b\001\002\000" +
    "\066\003\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\046\uffe0\047\uffe0\050\uffe0\052\uffe0\071\uffe0\072" +
    "\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\101\uffe0" +
    "\102\uffe0\103\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110" +
    "\uffe0\001\002\000\004\101\364\001\002\000\004\050\365" +
    "\001\002\000\036\037\102\040\113\041\164\042\126\043" +
    "\115\044\127\050\157\052\101\103\137\104\177\105\106" +
    "\106\155\107\121\110\160\001\002\000\004\051\367\001" +
    "\002\000\004\055\370\001\002\000\066\003\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\052\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf" +
    "\075\uffdf\076\uffdf\077\uffdf\101\uffdf\102\uffdf\103\uffdf\104" +
    "\uffdf\105\uffdf\106\uffdf\107\uffdf\110\uffdf\001\002\000\074" +
    "\002\uffed\003\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043" +
    "\uffed\044\uffed\046\uffed\047\uffed\050\uffed\052\uffed\062\uffed" +
    "\063\uffed\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076" +
    "\uffed\077\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105\uffed" +
    "\106\uffed\107\uffed\110\uffed\001\002\000\106\004\uff81\005" +
    "\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81" +
    "\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022" +
    "\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81" +
    "\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81\043" +
    "\uff81\044\uff81\045\uff81\051\uff81\053\uff81\055\uff81\056\uff81" +
    "\001\002\000\006\053\374\056\261\001\002\000\116\004" +
    "\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\043\uffaf\044\uffaf\045\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\055\uffaf\056\uffaf\057\uffaf\001\002\000" +
    "\016\002\uffbc\003\uffbc\062\uffbc\063\uffbc\070\uffbc\104\uffbc" +
    "\001\002\000\004\024\377\001\002\000\006\066\u0101\067" +
    "\u0103\001\002\000\004\055\u011a\001\002\000\006\046\u010e" +
    "\060\u010f\001\002\000\004\055\uffcf\001\002\000\006\046" +
    "\u0105\060\u0106\001\002\000\004\055\uffce\001\002\000\006" +
    "\047\uffba\104\uffba\001\002\000\004\104\030\001\002\000" +
    "\006\056\031\061\u0108\001\002\000\004\046\u0109\001\002" +
    "\000\006\047\uffba\104\uffba\001\002\000\006\047\u010b\104" +
    "\017\001\002\000\004\055\uffc8\001\002\000\006\047\u010d" +
    "\104\017\001\002\000\004\055\uffc9\001\002\000\010\062" +
    "\uffba\063\uffba\104\uffba\001\002\000\004\104\030\001\002" +
    "\000\006\056\031\061\u0111\001\002\000\004\046\u0112\001" +
    "\002\000\010\062\uffba\063\uffba\104\uffba\001\002\000\010" +
    "\062\011\063\021\104\017\001\002\000\010\047\u0116\062" +
    "\011\063\021\001\002\000\012\002\ufffd\047\ufffd\062\ufffd" +
    "\063\ufffd\001\002\000\004\055\uffc6\001\002\000\010\062" +
    "\011\063\021\104\017\001\002\000\010\047\u0119\062\011" +
    "\063\021\001\002\000\004\055\uffc7\001\002\000\016\002" +
    "\uffb8\003\uffb8\062\uffb8\063\uffb8\070\uffb8\104\uffb8\001\002" +
    "\000\006\050\u011c\060\u011d\001\002\000\006\051\u0125\104" +
    "\035\001\002\000\004\104\030\001\002\000\006\056\031" +
    "\061\u011f\001\002\000\004\050\u0120\001\002\000\006\051" +
    "\u0122\104\035\001\002\000\006\051\u0123\056\060\001\002" +
    "\000\004\046\ufff5\001\002\000\004\046\ufff6\001\002\000" +
    "\006\051\u0126\056\060\001\002\000\004\046\ufff7\001\002" +
    "\000\004\046\ufff8\001\002\000\012\002\ufff9\047\ufff9\062" +
    "\ufff9\063\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\024\004\013\005\015\006\021\007\007\010\022" +
    "\011\011\012\005\013\017\014\006\001\001\000\002\001" +
    "\001\000\004\027\u0126\001\001\000\014\010\u0114\011\011" +
    "\012\005\013\017\014\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\065\016\036\001" +
    "\001\000\004\026\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\033\016\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\042\020" +
    "\041\024\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\047\020\041\024\044\025\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\052\020\041\024" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\054\020\041\024\044\001\001\000\002\001\001\000" +
    "\010\017\056\020\041\024\044\001\001\000\002\001\001" +
    "\000\004\016\063\001\001\000\002\001\001\000\010\017" +
    "\062\020\041\024\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\070\020\041\024\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\073\020\041\024" +
    "\044\001\001\000\002\001\001\000\004\051\076\001\001" +
    "\000\002\001\001\000\106\006\122\027\110\030\103\031" +
    "\132\032\102\033\077\034\127\035\151\036\115\037\107" +
    "\040\160\041\117\042\165\043\164\044\124\046\131\047" +
    "\141\050\147\052\162\053\121\054\111\055\155\056\135" +
    "\057\143\060\104\061\161\062\140\063\123\064\166\065" +
    "\116\066\134\067\145\070\152\071\146\001\001\000\002" +
    "\001\001\000\050\045\372\046\255\047\141\050\147\053" +
    "\121\054\111\055\155\056\135\057\143\060\104\061\161" +
    "\062\140\063\123\064\166\065\116\066\134\067\145\070" +
    "\152\071\146\001\001\000\016\047\141\050\147\066\371" +
    "\067\145\070\152\071\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\100" +
    "\027\110\031\362\032\102\033\077\034\127\035\151\036" +
    "\115\037\107\040\160\041\117\042\165\043\164\044\124" +
    "\046\131\047\141\050\147\053\121\054\111\055\155\056" +
    "\135\057\143\060\104\061\161\062\140\063\123\064\166" +
    "\065\116\066\134\067\145\070\152\071\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\352\001\001" +
    "\000\016\047\141\050\147\066\341\067\145\070\152\071" +
    "\146\001\001\000\002\001\001\000\016\047\141\050\147" +
    "\066\327\067\145\070\152\071\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\027\110\032\326\033\325\034\127\035\151\036\115" +
    "\037\107\040\160\041\117\042\165\043\164\044\124\046" +
    "\131\047\141\050\147\053\121\054\111\055\155\056\135" +
    "\057\143\060\104\061\161\062\140\063\123\064\166\065" +
    "\116\066\134\067\145\070\152\071\146\001\001\000\016" +
    "\047\141\050\147\066\324\067\145\070\152\071\146\001" +
    "\001\000\016\047\141\050\147\066\323\067\145\070\152" +
    "\071\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\102\027\110\030\312\031\132\032\102" +
    "\033\077\034\127\035\151\036\115\037\107\040\160\041" +
    "\117\042\165\043\164\044\124\046\131\047\141\050\147" +
    "\053\121\054\111\055\155\056\135\057\143\060\104\061" +
    "\161\062\140\063\123\064\166\065\116\066\134\067\145" +
    "\070\152\071\146\001\001\000\046\046\311\047\141\050" +
    "\147\053\121\054\111\055\155\056\135\057\143\060\104" +
    "\061\161\062\140\063\123\064\166\065\116\066\134\067" +
    "\145\070\152\071\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\046\233\047\141\050\147\053\121" +
    "\054\111\055\155\056\135\057\143\060\104\061\161\062" +
    "\140\063\123\064\166\065\116\066\134\067\145\070\152" +
    "\071\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\047\141\050\147" +
    "\066\214\067\145\070\152\071\146\001\001\000\076\027" +
    "\110\032\213\033\212\034\127\035\151\036\115\037\107" +
    "\040\160\041\117\042\165\043\164\044\124\046\131\047" +
    "\141\050\147\053\121\054\111\055\155\056\135\057\143" +
    "\060\104\061\161\062\140\063\123\064\166\065\116\066" +
    "\134\067\145\070\152\071\146\001\001\000\076\027\110" +
    "\032\211\033\210\034\127\035\151\036\115\037\107\040" +
    "\160\041\117\042\165\043\164\044\124\046\131\047\141" +
    "\050\147\053\121\054\111\055\155\056\135\057\143\060" +
    "\104\061\161\062\140\063\123\064\166\065\116\066\134" +
    "\067\145\070\152\071\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\171\020\041\024\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\047\141\050" +
    "\147\065\207\066\134\067\145\070\152\071\146\001\001" +
    "\000\020\047\141\050\147\065\206\066\134\067\145\070" +
    "\152\071\146\001\001\000\020\047\141\050\147\065\177" +
    "\066\134\067\145\070\152\071\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\047\141\050\147\066\205" +
    "\067\145\070\152\071\146\001\001\000\016\047\141\050" +
    "\147\066\204\067\145\070\152\071\146\001\001\000\016" +
    "\047\141\050\147\066\203\067\145\070\152\071\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\047\141\050\147\062\232\063\123\064" +
    "\166\065\116\066\134\067\145\070\152\071\146\001\001" +
    "\000\026\047\141\050\147\062\217\063\123\064\166\065" +
    "\116\066\134\067\145\070\152\071\146\001\001\000\004" +
    "\073\221\001\001\000\002\001\001\000\024\047\141\050" +
    "\147\063\225\064\166\065\116\066\134\067\145\070\152" +
    "\071\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\047\141\050\147" +
    "\064\231\065\116\066\134\067\145\070\152\071\146\001" +
    "\001\000\022\047\141\050\147\064\230\065\116\066\134" +
    "\067\145\070\152\071\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\073\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\047\141\050\147\056\236\057" +
    "\143\060\104\061\161\062\140\063\123\064\166\065\116" +
    "\066\134\067\145\070\152\071\146\001\001\000\002\001" +
    "\001\000\034\047\141\050\147\057\240\060\104\061\161" +
    "\062\140\063\123\064\166\065\116\066\134\067\145\070" +
    "\152\071\146\001\001\000\002\001\001\000\032\047\141" +
    "\050\147\060\242\061\161\062\140\063\123\064\166\065" +
    "\116\066\134\067\145\070\152\071\146\001\001\000\002" +
    "\001\001\000\030\047\141\050\147\061\244\062\140\063" +
    "\123\064\166\065\116\066\134\067\145\070\152\071\146" +
    "\001\001\000\002\001\001\000\046\046\246\047\141\050" +
    "\147\053\121\054\111\055\155\056\135\057\143\060\104" +
    "\061\161\062\140\063\123\064\166\065\116\066\134\067" +
    "\145\070\152\071\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\045\264\046\255\047\141\050\147\053" +
    "\121\054\111\055\155\056\135\057\143\060\104\061\161" +
    "\062\140\063\123\064\166\065\116\066\134\067\145\070" +
    "\152\071\146\001\001\000\012\017\047\020\041\024\044" +
    "\025\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\045\257\046\255\047\141\050\147\053\121\054\111" +
    "\055\155\056\135\057\143\060\104\061\161\062\140\063" +
    "\123\064\166\065\116\066\134\067\145\070\152\071\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\046\262\047\141\050\147\053\121\054\111" +
    "\055\155\056\135\057\143\060\104\061\161\062\140\063" +
    "\123\064\166\065\116\066\134\067\145\070\152\071\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\046\272\047" +
    "\141\050\147\053\121\054\111\055\155\056\135\057\143" +
    "\060\104\061\161\062\140\063\123\064\166\065\116\066" +
    "\134\067\145\070\152\071\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\046\300\047\141\050\147\053\121" +
    "\054\111\055\155\056\135\057\143\060\104\061\161\062" +
    "\140\063\123\064\166\065\116\066\134\067\145\070\152" +
    "\071\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\046\314" +
    "\047\141\050\147\053\121\054\111\055\155\056\135\057" +
    "\143\060\104\061\161\062\140\063\123\064\166\065\116" +
    "\066\134\067\145\070\152\071\146\001\001\000\002\001" +
    "\001\000\100\027\110\031\317\032\102\033\316\034\127" +
    "\035\151\036\115\037\107\040\160\041\117\042\165\043" +
    "\164\044\124\046\131\047\141\050\147\053\121\054\111" +
    "\055\155\056\135\057\143\060\104\061\161\062\140\063" +
    "\123\064\166\065\116\066\134\067\145\070\152\071\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\027" +
    "\110\032\322\033\321\034\127\035\151\036\115\037\107" +
    "\040\160\041\117\042\165\043\164\044\124\046\131\047" +
    "\141\050\147\053\121\054\111\055\155\056\135\057\143" +
    "\060\104\061\161\062\140\063\123\064\166\065\116\066" +
    "\134\067\145\070\152\071\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\046\333\047\141\050" +
    "\147\053\121\054\111\055\155\056\135\057\143\060\104" +
    "\061\161\062\140\063\123\064\166\065\116\066\134\067" +
    "\145\070\152\071\146\001\001\000\002\001\001\000\046" +
    "\046\335\047\141\050\147\053\121\054\111\055\155\056" +
    "\135\057\143\060\104\061\161\062\140\063\123\064\166" +
    "\065\116\066\134\067\145\070\152\071\146\001\001\000" +
    "\002\001\001\000\046\046\337\047\141\050\147\053\121" +
    "\054\111\055\155\056\135\057\143\060\104\061\161\062" +
    "\140\063\123\064\166\065\116\066\134\067\145\070\152" +
    "\071\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\047\141\050\147\055\360\056\135\057" +
    "\143\060\104\061\161\062\140\063\123\064\166\065\116" +
    "\066\134\067\145\070\152\071\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\047\141\050\147\053\357\054\111\055\155\056" +
    "\135\057\143\060\104\061\161\062\140\063\123\064\166" +
    "\065\116\066\134\067\145\070\152\071\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\046\365" +
    "\047\141\050\147\053\121\054\111\055\155\056\135\057" +
    "\143\060\104\061\161\062\140\063\123\064\166\065\116" +
    "\066\134\067\145\070\152\071\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\u0101\022\u0103" +
    "\023\377\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\u010b\001\001\000\004\026\u0106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u0109\001\001\000\006" +
    "\006\122\052\162\001\001\000\002\001\001\000\006\006" +
    "\122\052\162\001\001\000\002\001\001\000\004\051\u0116" +
    "\001\001\000\004\026\u010f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\u0112\001\001\000\022\006\122" +
    "\007\u0113\010\022\011\011\012\005\013\017\014\006\052" +
    "\162\001\001\000\014\010\u0114\011\011\012\005\013\017" +
    "\014\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\122\007\u0117\010\022\011\011\012\005\013\017" +
    "\014\006\052\162\001\001\000\014\010\u0114\011\011\012" +
    "\005\013\017\014\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\u0123\016\036\001" +
    "\001\000\004\026\u011d\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\u0120\016\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Compilation compilation;
  public boolean printNoErrors = false;
  public boolean syntaxAnalysisFailed = false;
    
  @Override 
  public void syntax_error(Symbol cur_token)
  {
    compilation.syntaxError(this, cur_token);
  }
  
  @Override
  public void report_error(String message, Object info)
  {    
  	compilation.reportSyntaxError(this, message, info); 
  }

  @Override
  public void unrecovered_syntax_error(Symbol cur_token)
  {
    compilation.syntaxAnalysisFatalFailure = true;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerParser$actions {


    Environment getEnvironment() {
        return parser.compilation.environment;
    }

  private final CompilerParser parser;

  /** Constructor */
  CUP$CompilerParser$actions(CompilerParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerParser$do_action(
    int                        CUP$CompilerParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerParser$parser,
    java.util.Stack            CUP$CompilerParser$stack,
    int                        CUP$CompilerParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expr0_simple ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new VariableExpression(id, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr0_simple",54, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr0_simple ::= NEW IDENTIFIER LPAR RPAR 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr0_simple",54, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr0_simple ::= constant 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr0_simple",54, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr0_simple ::= LPAR expression RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr0_simple",54, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr1_subroutinegroup ::= expr1_postfix PERIOD IDENTIFIER 
            {
              SubroutineGroup RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = SubroutineGroup.create(var, id, varleft, varright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_subroutinegroup",55, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr1_subroutinegroup ::= IDENTIFIER 
            {
              SubroutineGroup RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = SubroutineGroup.create(id, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_subroutinegroup",55, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr1_postfix ::= expr1_postfix DECREMENT 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",53, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr1_postfix ::= expr1_postfix INCREMENT 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",53, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr1_postfix ::= expr1_postfix LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",53, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr1_postfix ::= expr1_postfix PERIOD IDENTIFIER 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",53, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr1_postfix ::= expr1_subroutinegroup LEFTTYPEBRACKET type_arguments RIGHTTYPEBRACKET LPAR RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		SubroutineGroup id = (SubroutineGroup)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int targsleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int targsright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		ArrayList<Type> targs = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		 RESULT = CallExpression.create(id, targs, null, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",53, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr1_postfix ::= expr1_subroutinegroup LEFTTYPEBRACKET type_arguments RIGHTTYPEBRACKET LPAR expressions RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).right;
		SubroutineGroup id = (SubroutineGroup)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).value;
		int targsleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int targsright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		ArrayList<Type> targs = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = CallExpression.create(id, targs, args, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",53, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr1_postfix ::= expr1_subroutinegroup LPAR expressions RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		SubroutineGroup id = (SubroutineGroup)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = CallExpression.create(id, null, args, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",53, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr1_postfix ::= expr1_subroutinegroup LPAR RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		SubroutineGroup id = (SubroutineGroup)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		 RESULT = CallExpression.create(id, null, null, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",53, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr1_postfix ::= expr0_simple 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",53, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr2_prefix ::= expr1_postfix 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",52, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr2_prefix ::= MINUS expr2_prefix 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",52, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr2_prefix ::= PLUS expr2_prefix 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",52, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr2_prefix ::= BITWISENEGATION expr2_prefix 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",52, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr2_prefix ::= LOGICALNEGATION expr2_prefix 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",52, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr2_prefix ::= DECREMENT expr2_prefix 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",52, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr2_prefix ::= INCREMENT expr2_prefix 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",52, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr3_multiplication ::= expr2_prefix 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr3_multiplication",51, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr3_multiplication ::= expr3_multiplication MODULO expr2_prefix 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr3_multiplication",51, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr3_multiplication ::= expr3_multiplication DIVIDE expr2_prefix 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr3_multiplication",51, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr3_multiplication ::= expr3_multiplication TIMES expr2_prefix 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr3_multiplication",51, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr4_addition ::= expr3_multiplication 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr4_addition",50, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr4_addition ::= expr4_addition CONCATENATE expr3_multiplication 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr4_addition",50, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr4_addition ::= expr4_addition PLUS expr3_multiplication 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = ArithmeticExpression.create(/*TODO*/e1, e2, opleft, opright); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr4_addition",50, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr4_addition ::= expr4_addition MINUS expr3_multiplication 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr4_addition",50, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr5_shift ::= expr4_addition 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr5_shift",49, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr5_shift ::= expr5_shift SHIFTRIGHT expr4_addition 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr5_shift",49, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr5_shift ::= expr5_shift SHIFTLEFT expr4_addition 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr5_shift",49, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr6_comparison ::= expr5_shift 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr6_comparison",48, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr6_comparison ::= expr6_comparison relational_operator expr5_shift 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr6_comparison",48, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr7_equality ::= expr6_comparison 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr7_equality",47, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr7_equality ::= expr7_equality UNEQUAL expr6_comparison 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr7_equality",47, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr7_equality ::= expr7_equality EQUALEQUAL expr6_comparison 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = ArithmeticExpression.create(/*TODO*/e1, e2, opleft, opright); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr7_equality",47, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr8_bitwise_and ::= expr8_bitwise_and BITWISEAND expr7_equality 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr8_bitwise_and",46, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr8_bitwise_and ::= expr7_equality 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr8_bitwise_and",46, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr9_xor ::= expr9_xor XOR expr8_bitwise_and 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr9_xor",45, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr9_xor ::= expr8_bitwise_and 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr9_xor",45, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr10_bitwise_or ::= expr10_bitwise_or BITWISEOR expr9_xor 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr10_bitwise_or",44, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr10_bitwise_or ::= expr9_xor 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr10_bitwise_or",44, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr11_and ::= expr10_bitwise_or 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr11_and",43, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr11_and ::= expr11_and LOGICALAND expr10_bitwise_or 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr11_and",43, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr12_or ::= expr11_and 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr12_or",42, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr12_or ::= expr12_or LOGICALOR expr11_and 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr12_or",42, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr13_assignment ::= expr12_or 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr13_assignment",41, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr13_assignment ::= expr12_or assignment_operator expr13_assignment 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr13_assignment",41, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= expr13_assignment 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // relational_operator ::= GREATEROREQUAL 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("relational_operator",57, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // relational_operator ::= LESSOREQUAL 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("relational_operator",57, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // relational_operator ::= GREATERTHAN 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("relational_operator",57, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // relational_operator ::= LESSTHAN 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("relational_operator",57, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assignment_operator ::= EQUAL 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",56, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assignment_operator ::= UNARYBITWISEOR 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",56, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assignment_operator ::= UNARYXOR 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",56, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // assignment_operator ::= UNARYBITWISEAND 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",56, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assignment_operator ::= UNARYSHIFTRIGHT 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",56, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assignment_operator ::= UNARYSHIFTLEFT 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",56, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assignment_operator ::= UNARYMODULO 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",56, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assignment_operator ::= UNARYDIVIDE 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",56, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assignment_operator ::= UNARYTIMES 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",56, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assignment_operator ::= UNARYMINUS 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",56, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignment_operator ::= UNARYPLUS 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",56, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // new_list ::= NEW IDENTIFIER LBRACKET INTEGER RBRACKET 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("new_list",38, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // new_list ::= LBRACKET expressions RBRACKET 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("new_list",38, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // constant ::= new_list 
            {
              Expression RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("constant",37, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // constant ::= CHARACTER 
            {
              Expression RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Character data = (Character)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("constant",37, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // constant ::= STRING 
            {
              Expression RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("constant",37, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // constant ::= FLOAT 
            {
              Expression RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Float data = (Float)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("constant",37, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // constant ::= INTEGER 
            {
              Expression RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Integer data = (Integer)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("constant",37, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expressions ::= expressions COMMA expression 
            {
              Expressions RESULT =null;
		int exsleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int exsright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expressions exs = (Expressions)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 exs.add(ex); RESULT = exs; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expressions",35, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expressions ::= expression 
            {
              Expressions RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new Expressions(); RESULT.add(ex); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expressions",35, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variable_declaration ::= IDENTIFIER COLON type SEMICOLON 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("variable_declaration",4, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type_declaration ::= TYPE IDENTIFIER EQUAL type_definition SEMICOLON 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_declaration",3, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // local_declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("local_declaration",40, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // local_declarations ::= 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("local_declarations",39, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // local_declarations ::= local_declarations local_declaration 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("local_declarations",39, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // global_declaration ::= error SEMICOLON 
            {
              Object RESULT =null;
		
		parser.compilation.addSuffix(" Malformed declaration. Analysis continues at next semicolon.");
	
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("global_declaration",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // global_declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("global_declaration",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // global_declaration ::= type_declaration 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("global_declaration",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // global_declarations ::= 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("global_declarations",1, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // global_declarations ::= global_declarations global_declaration 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("global_declarations",1, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type_parameters ::= type_parameters COMMA IDENTIFIER 
            {
              ArrayList<String> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		ArrayList<String> tp = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 tp.add(id); RESULT = tp; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_parameters",20, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type_parameters ::= IDENTIFIER 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(id); /*TODO should be types rather than strings, I think */ 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_parameters",20, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type_arguments ::= type_arguments COMMA type 
            {
              ArrayList<Type> RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_arguments",19, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type_arguments ::= type 
            {
              ArrayList<Type> RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_arguments",19, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type_instantiation ::= IDENTIFIER LEFTTYPEBRACKET type_arguments RIGHTTYPEBRACKET 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_instantiation",18, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // class_type ::= CLASS LEFTTYPEBRACKET type_parameters RIGHTTYPEBRACKET LBRACE local_declarations subroutines RBRACE 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("class_type",16, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // class_type ::= CLASS LBRACE local_declarations subroutines RBRACE 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("class_type",16, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // structure_type ::= STRUCTURE LEFTTYPEBRACKET type_parameters RIGHTTYPEBRACKET LBRACE local_declarations RBRACE 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("structure_type",15, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // structure_type ::= STRUCTURE LBRACE local_declarations RBRACE 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("structure_type",15, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_type ::= LIST OF type 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("list_type",14, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= type_instantiation 
            {
              Type RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= list_type 
            {
              Type RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Type.findType(id, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_definition ::= class_type 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_definition",17, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_definition ::= structure_type 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_definition",17, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // for_head ::= FOR LPAR IDENTIFIER EQUAL expression SEMICOLON expression SEMICOLON expression RPAR 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("for_head",34, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // while_head ::= WHILE LPAR expression RPAR 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("while_head",33, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // foreach_head ::= FOREACH LPAR IDENTIFIER IN expression RPAR 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("foreach_head",32, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // loop_closed ::= for_head closed_statement 
            {
              Statement RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("loop_closed",31, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // loop_closed ::= while_head closed_statement 
            {
              Statement RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("loop_closed",31, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // loop_closed ::= foreach_head closed_statement 
            {
              Statement RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("loop_closed",31, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if_long_closed_closed ::= IF LPAR expression RPAR closed_statement ELSE closed_statement 
            {
              IfStatement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int stelseleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int stelseright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statement stelse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                            RESULT = new IfStatement(ex, st, stelse, parser.compilation);
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("if_long_closed_closed",30, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_statement ::= BREAK 
            {
              Statement RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("simple_statement",29, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_statement ::= STOP 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
 						    RESULT = new StopStatement(sleft, sright);
 						 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("simple_statement",29, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_statement ::= RETURN expression 
            {
              Statement RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("simple_statement",29, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_statement ::= expression 
            {
              Statement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                            RESULT = new ExpressionStatement(ex, parser.compilation);
                         
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("simple_statement",29, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // closed_statement ::= error SEMICOLON 
            {
              Statement RESULT =null;
		 
		                 	parser.compilation.addSuffix(" Analysis continues at next semicolon.");
		                 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("closed_statement",25, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // closed_statement ::= loop_closed 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("closed_statement",25, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // closed_statement ::= if_long_closed_closed 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		IfStatement s = (IfStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("closed_statement",25, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // closed_statement ::= block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		BlockStatement b = (BlockStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = b; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("closed_statement",25, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // closed_statement ::= REPEAT statement WHILE LPAR expression RPAR SEMICOLON 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		
		                    RESULT = new RepeatStatement(ex, st);
		                 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("closed_statement",25, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // closed_statement ::= simple_statement SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		
                            RESULT = s;
                         
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("closed_statement",25, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // loop_open ::= for_head open_statement 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("loop_open",28, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // loop_open ::= while_head open_statement 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("loop_open",28, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // loop_open ::= foreach_head open_statement 
            {
              Object RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("loop_open",28, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if_long_closed_open ::= IF LPAR expression RPAR closed_statement ELSE open_statement 
            {
              IfStatement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statement st2 = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                            RESULT = new IfStatement(ex, st, st2, parser.compilation);
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("if_long_closed_open",27, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if_short ::= IF LPAR expression RPAR statement 
            {
              IfStatement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                            RESULT = new IfStatement(ex, st, null, parser.compilation);
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("if_short",26, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // open_statement ::= loop_open 
            {
              Statement RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("open_statement",24, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // open_statement ::= if_long_closed_open 
            {
              Statement RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("open_statement",24, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // open_statement ::= if_short 
            {
              Statement RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("open_statement",24, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= closed_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                            RESULT = s;
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= open_statement 
            {
              Statement RESULT =null;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statements ::= 
            {
              Statements RESULT =null;
		
                            RESULT = new Statements();
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("statements",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statements ::= statement statements 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                            ss.addStatement(s);
                            RESULT = ss;
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("statements",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // block ::= LBRACE local_declarations statements RBRACE 
            {
              BlockStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		
                            // TODO make scoping work correctly
                            RESULT = new BlockStatement();
                            RESULT.statements = s;
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("block",21, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parameter ::= IDENTIFIER COLON type 
            {
              Parameter RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                    RESULT = new Parameter(id, t);
                    // TODO add parameter as variable to environment (perhaps do this inside parameter constructor)
                 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parameters ::= parameters COMMA parameter 
            {
              ArrayList<Parameter> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		ArrayList<Parameter> ps = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 ps.add(p); RESULT = ps; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameters ::= parameter 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(p); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function_header ::= FUNCTION IDENTIFIER LEFTTYPEBRACKET type_parameters RIGHTTYPEBRACKET LPAR RPAR COLON type 
            {
              Subroutine RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-7)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		ArrayList<String> tp = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Subroutine.create(SubroutineKind.FUNCTION, name, tp, null, t, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("function_header",10, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function_header ::= FUNCTION IDENTIFIER LEFTTYPEBRACKET type_parameters RIGHTTYPEBRACKET LPAR parameters RPAR COLON type 
            {
              Subroutine RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-8)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).right;
		ArrayList<String> tp = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		ArrayList<Parameter> ps = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Subroutine.create(SubroutineKind.FUNCTION, name, tp, ps, t, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("function_header",10, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function_header ::= FUNCTION IDENTIFIER LPAR RPAR COLON type 
            {
              Subroutine RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Subroutine.create(SubroutineKind.FUNCTION, name, null, null, t, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("function_header",10, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_header ::= FUNCTION IDENTIFIER LPAR parameters RPAR COLON type 
            {
              Subroutine RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		ArrayList<Parameter> ps = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Subroutine.create(SubroutineKind.FUNCTION, name, null, ps, t, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("function_header",10, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // procedure_header ::= PROCEDURE IDENTIFIER LEFTTYPEBRACKET type_parameters RIGHTTYPEBRACKET LPAR RPAR 
            {
              Subroutine RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		ArrayList<String> tp = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		
                         RESULT = Subroutine.create(
                                                   SubroutineKind.PROCEDURE,
                                                   name,
                                                   tp,
                                                   null,
                                                   null,
                                                   parser.compilation
                                                   );
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("procedure_header",9, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // procedure_header ::= PROCEDURE IDENTIFIER LEFTTYPEBRACKET type_parameters RIGHTTYPEBRACKET LPAR parameters RPAR 
            {
              Subroutine RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		ArrayList<String> tp = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		ArrayList<Parameter> ps = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		
                        RESULT = Subroutine.create(
                                                  SubroutineKind.PROCEDURE,
                                                  name,
                                                  tp,
                                                  ps,
                                                  null,
                                                  parser.compilation
                                                  );
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("procedure_header",9, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // procedure_header ::= PROCEDURE IDENTIFIER LPAR RPAR 
            {
              Subroutine RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		
                           RESULT = Subroutine.create(
                                                     SubroutineKind.PROCEDURE,
                                                     name,
                                                     null,
                                                     null,
                                                     null,
                                                     parser.compilation
                                                     );
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("procedure_header",9, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // procedure_header ::= PROCEDURE IDENTIFIER LPAR parameters RPAR 
            {
              Subroutine RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		ArrayList<Parameter> ps = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		
                        RESULT = Subroutine.create(
                            SubroutineKind.PROCEDURE,
                            name,
                            null,
                            ps,
                            null,
                            parser.compilation
                            );
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("procedure_header",9, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function ::= function_header block 
            {
              Subroutine RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Subroutine h = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		BlockStatement b = (BlockStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                        getEnvironment().leaveSubroutine();
                        h.block = b;
                        RESULT = h;
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // procedure ::= procedure_header block 
            {
              Subroutine RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Subroutine p = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		BlockStatement b = (BlockStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                        getEnvironment().leaveSubroutine();
                        p.block = b;
                        RESULT = p;
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("procedure",8, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // subroutine ::= procedure 
            {
              Subroutine RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Subroutine p = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("subroutine",6, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // subroutine ::= function 
            {
              Subroutine RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Subroutine f = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = f; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("subroutine",6, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // subroutines ::= subroutines subroutine 
            {
              Subroutines RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Subroutines ss = (Subroutines)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Subroutine s = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                        ss.addSubroutine(s);
                        RESULT = ss;
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("subroutines",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // subroutines ::= subroutine 
            {
              Subroutines RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Subroutine s = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                        Subroutines subroutines = new Subroutines();
                        subroutines.addSubroutine(s); // TODO check for uniqueness
                        RESULT = subroutines;
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("subroutines",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= global_declarations 
            {
              Object RESULT =null;
		
					    // This is only useful for syntax tests, because it will always fail in semantic analysis
					    // due to not having a "main" procedure. But for syntax tests, it is useful.
					    parser.compilation.abstractSyntaxTree = new ProgramNode();
					    parser.compilation.completeAnalysis(this.parser);
					
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= global_declarations subroutines 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Subroutines s = (Subroutines)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
					    ProgramNode program = new ProgramNode();
					    program.Subroutines = s;
					    parser.compilation.abstractSyntaxTree = program;
					    parser.compilation.completeAnalysis(this.parser);
					
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerParser$parser.done_parsing();
          return CUP$CompilerParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

