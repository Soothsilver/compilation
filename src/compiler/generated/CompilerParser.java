
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 09 17:28:58 CET 2015
//----------------------------------------------------

package compiler.generated;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import compiler.*;
import compiler.nodes.*;
import compiler.nodes.statements.*;
import compiler.nodes.declarations.*;
import compiler.nodes.expressions.*;
import compiler.nodes.expressions.literals.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 09 17:28:58 CET 2015
  */
public class CompilerParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompilerParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompilerParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\247\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\010\003\000\002\010\004\000\002\011\003" +
    "\000\002\011\003\000\002\012\002\000\002\012\003\000" +
    "\002\014\004\000\002\013\004\000\002\015\010\000\002" +
    "\017\003\000\002\021\002\000\002\021\005\000\002\022" +
    "\002\000\002\022\003\000\002\016\012\000\002\020\003" +
    "\000\002\023\003\000\002\023\005\000\002\024\005\000" +
    "\002\051\002\000\002\052\002\000\002\050\006\000\002" +
    "\047\010\000\002\043\004\000\002\043\002\000\002\044" +
    "\003\000\002\044\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\055\007\000\002\056\011\000" +
    "\002\046\004\000\002\046\013\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\004\000\002\060" +
    "\003\000\002\060\004\000\002\060\003\000\002\060\003" +
    "\000\002\061\011\000\002\062\006\000\002\062\006\000" +
    "\002\062\006\000\002\053\002\000\002\054\002\000\002" +
    "\057\006\000\002\057\006\000\002\057\006\000\002\063" +
    "\010\000\002\064\006\000\002\065\012\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\041\005\000" +
    "\002\042\006\000\002\037\003\000\002\037\005\000\002" +
    "\035\003\000\002\034\003\000\002\036\003\000\002\036" +
    "\005\000\002\003\004\000\002\003\002\000\002\004\003" +
    "\000\002\113\002\000\002\004\006\000\002\004\003\000" +
    "\002\004\004\000\002\005\004\000\002\005\002\000\002" +
    "\006\003\000\002\025\013\000\002\025\013\000\002\026" +
    "\005\000\002\026\002\000\002\027\005\000\002\027\002" +
    "\000\002\030\003\000\002\031\003\000\002\032\004\000" +
    "\002\033\003\000\002\007\006\000\002\066\003\000\002" +
    "\066\005\000\002\111\003\000\002\111\003\000\002\111" +
    "\003\000\002\111\003\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\111\003\000\002\111\003\000" +
    "\002\111\003\000\002\111\003\000\002\112\003\000\002" +
    "\112\003\000\002\112\003\000\002\112\003\000\002\067" +
    "\003\000\002\072\005\000\002\072\003\000\002\073\005" +
    "\000\002\073\003\000\002\074\005\000\002\074\003\000" +
    "\002\075\005\000\002\075\003\000\002\076\005\000\002" +
    "\076\003\000\002\077\005\000\002\077\003\000\002\100" +
    "\005\000\002\100\005\000\002\100\003\000\002\101\005" +
    "\000\002\101\003\000\002\102\005\000\002\102\005\000" +
    "\002\102\003\000\002\103\005\000\002\103\005\000\002" +
    "\103\005\000\002\103\003\000\002\104\005\000\002\104" +
    "\005\000\002\104\005\000\002\104\003\000\002\105\004" +
    "\000\002\105\004\000\002\105\004\000\002\105\004\000" +
    "\002\105\004\000\002\105\004\000\002\105\003\000\002" +
    "\106\005\000\002\106\006\000\002\106\011\000\002\106" +
    "\010\000\002\106\005\000\002\106\006\000\002\106\004" +
    "\000\002\106\004\000\002\106\003\000\002\110\003\000" +
    "\002\110\005\000\002\107\005\000\002\107\003\000\002" +
    "\107\006\000\002\107\011\000\002\107\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\071\005\000\002\071\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\020\002\uffbc\003\uffbc\062\uffbc\063\uffbc\070" +
    "\uffbc\105\uffbc\106\uffbc\001\002\000\004\002\u0135\001\002" +
    "\000\020\002\uffff\003\015\062\011\063\021\070\013\105" +
    "\020\106\017\001\002\000\012\002\ufffb\047\ufffb\062\ufffb" +
    "\063\ufffb\001\002\000\004\046\026\001\002\000\010\002" +
    "\000\062\011\063\021\001\002\000\004\106\u012f\001\002" +
    "\000\012\002\ufffc\047\ufffc\062\ufffc\063\ufffc\001\002\000" +
    "\004\106\u0112\001\002\000\020\002\uffbd\003\uffbd\062\uffbd" +
    "\063\uffbd\070\uffbd\105\uffbd\106\uffbd\001\002\000\004\055" +
    "\u0111\001\002\000\020\002\uffbb\003\uffbb\062\uffbb\063\uffbb" +
    "\070\uffbb\105\uffbb\106\uffbb\001\002\000\004\054\124\001" +
    "\002\000\004\106\u010e\001\002\000\004\106\370\001\002" +
    "\000\004\046\026\001\002\000\020\002\uffb8\003\uffb8\062" +
    "\uffb8\063\uffb8\070\uffb8\105\uffb8\106\uffb8\001\002\000\012" +
    "\002\ufffe\047\ufffe\062\ufffe\063\ufffe\001\002\000\012\002" +
    "\ufff8\047\ufff8\062\ufff8\063\ufff8\001\002\000\070\003\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\052\uffb5\071\uffb5\072\uffb5\073\uffb5" +
    "\074\uffb5\076\uffb5\077\uffb5\101\uffb5\102\uffb5\103\uffb5\104" +
    "\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5" +
    "\001\002\000\070\003\070\037\032\040\043\041\117\042" +
    "\056\043\045\044\057\046\103\047\uffe6\050\112\052\031" +
    "\071\065\072\104\073\075\074\061\076\077\077\044\101" +
    "\107\102\037\103\071\104\073\106\123\107\036\110\110" +
    "\111\050\112\113\113\064\001\002\000\070\003\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\052\uffe4\071\uffe4\072\uffe4\073\uffe4\074" +
    "\uffe4\076\uffe4\077\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4" +
    "\106\uffe4\107\uffe4\110\uffe4\111\uffe4\112\uffe4\113\uffe4\001" +
    "\002\000\042\037\032\040\043\041\117\042\056\043\045" +
    "\044\057\050\112\052\031\103\071\104\073\106\146\107" +
    "\036\110\110\111\050\112\113\113\064\001\002\000\042" +
    "\037\032\040\043\041\117\042\056\043\045\044\057\050" +
    "\112\052\031\103\071\104\073\106\146\107\036\110\110" +
    "\111\050\112\113\113\064\001\002\000\070\003\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\052\uffe5\071\uffe5\072\uffe5\073\uffe5\074" +
    "\uffe5\076\uffe5\077\uffe5\101\uffe5\102\uffe5\103\uffe5\104\uffe5" +
    "\106\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5\113\uffe5\001" +
    "\002\000\004\047\364\001\002\000\052\015\uff8d\016\uff8d" +
    "\017\221\020\uff8d\021\uff8d\024\uff8d\025\uff8d\026\uff8d\027" +
    "\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d" +
    "\036\uff8d\051\uff8d\053\uff8d\055\uff8d\056\uff8d\001\002\000" +
    "\116\004\uff63\005\uff63\006\uff63\007\uff63\010\uff63\011\uff63" +
    "\012\uff63\013\uff63\014\uff63\015\uff63\016\uff63\017\uff63\020" +
    "\uff63\021\uff63\022\uff63\023\uff63\024\uff63\025\uff63\026\uff63" +
    "\027\uff63\030\uff63\031\uff63\032\uff63\033\uff63\034\uff63\035" +
    "\uff63\036\uff63\037\uff63\040\uff63\043\uff63\044\uff63\045\uff63" +
    "\051\uff63\052\uff63\053\uff63\055\uff63\056\uff63\057\uff63\001" +
    "\002\000\066\003\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\046\uffd0\050\uffd0\052\uffd0\071\uffd0\072" +
    "\uffd0\073\uffd0\074\uffd0\076\uffd0\077\uffd0\101\uffd0\102\uffd0" +
    "\103\uffd0\104\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\112" +
    "\uffd0\113\uffd0\001\002\000\004\055\353\001\002\000\072" +
    "\003\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\046\uffdc\047\uffdc\050\uffdc\052\uffdc\071\uffdc\072\uffdc" +
    "\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\101\uffdc\102" +
    "\uffdc\103\uffdc\104\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc" +
    "\112\uffdc\113\uffdc\001\002\000\042\016\337\024\340\025" +
    "\350\026\347\027\342\030\346\031\334\032\341\033\335" +
    "\034\343\035\345\036\336\051\uff95\053\uff95\055\uff95\056" +
    "\uff95\001\002\000\042\037\032\040\043\041\117\042\056" +
    "\043\045\044\057\050\112\052\031\103\071\104\073\106" +
    "\146\107\036\110\110\111\050\112\113\113\064\001\002" +
    "\000\004\050\324\001\002\000\042\037\032\040\043\041" +
    "\117\042\056\043\045\044\057\050\112\052\031\103\071" +
    "\104\073\106\146\107\036\110\110\111\050\112\113\113" +
    "\064\001\002\000\070\003\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1\052" +
    "\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\076\uffe1\077\uffe1" +
    "\101\uffe1\102\uffe1\103\uffe1\104\uffe1\106\uffe1\107\uffe1\110" +
    "\uffe1\111\uffe1\112\uffe1\113\uffe1\001\002\000\106\004\152" +
    "\005\151\006\150\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013" +
    "\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f" +
    "\022\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030" +
    "\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f" +
    "\043\uff7f\044\uff7f\045\uff7f\051\uff7f\053\uff7f\055\uff7f\056" +
    "\uff7f\001\002\000\116\004\uff60\005\uff60\006\uff60\007\uff60" +
    "\010\uff60\011\uff60\012\uff60\013\uff60\014\uff60\015\uff60\016" +
    "\uff60\017\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024\uff60" +
    "\025\uff60\026\uff60\027\uff60\030\uff60\031\uff60\032\uff60\033" +
    "\uff60\034\uff60\035\uff60\036\uff60\037\uff60\040\uff60\043\uff60" +
    "\044\uff60\045\uff60\051\uff60\052\uff60\053\uff60\055\uff60\056" +
    "\uff60\057\uff60\001\002\000\072\003\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\043\uffda\044\uffda\046\uffda\047\uffda\050" +
    "\uffda\052\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda" +
    "\076\uffda\077\uffda\101\uffda\102\uffda\103\uffda\104\uffda\106" +
    "\uffda\107\uffda\110\uffda\111\uffda\112\uffda\113\uffda\001\002" +
    "\000\012\051\uff97\053\uff97\055\uff97\056\uff97\001\002\000" +
    "\074\003\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\046\uffb4\047\uffb4\050\uffb4\052\uffb4\062\uffb4\063" +
    "\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\076\uffb4\077\uffb4" +
    "\101\uffb4\102\uffb4\103\uffb4\104\uffb4\106\uffb4\107\uffb4\110" +
    "\uffb4\111\uffb4\112\uffb4\113\uffb4\001\002\000\072\007\uff86" +
    "\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016" +
    "\uff86\017\uff86\020\uff86\021\uff86\022\205\023\204\024\uff86" +
    "\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033" +
    "\uff86\034\uff86\035\uff86\036\uff86\051\uff86\053\uff86\055\uff86" +
    "\056\uff86\001\002\000\066\003\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\046\uffd0\050\uffd0\052\uffd0" +
    "\071\uffd0\072\uffd0\073\uffd0\074\uffd0\076\uffd0\077\uffd0\101" +
    "\uffd0\102\uffd0\103\uffd0\104\uffd0\106\uffd0\107\uffd0\110\uffd0" +
    "\111\uffd0\112\uffd0\113\uffd0\001\002\000\042\037\032\040" +
    "\043\041\117\042\056\043\045\044\057\050\112\052\031" +
    "\103\071\104\073\106\146\107\036\110\110\111\050\112" +
    "\113\113\064\001\002\000\042\037\032\040\043\041\117" +
    "\042\056\043\045\044\057\050\112\052\031\103\071\104" +
    "\073\106\146\107\036\110\110\111\050\112\113\113\064" +
    "\001\002\000\070\003\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\052\uffe3" +
    "\071\uffe3\072\uffe3\073\uffe3\074\uffe3\076\uffe3\077\uffe3\101" +
    "\uffe3\102\uffe3\103\uffe3\104\uffe3\106\uffe3\107\uffe3\110\uffe3" +
    "\111\uffe3\112\uffe3\113\uffe3\001\002\000\004\050\304\001" +
    "\002\000\004\055\uffd8\001\002\000\070\003\070\037\032" +
    "\040\043\041\117\042\056\043\045\044\057\046\103\047" +
    "\uffe6\050\112\052\031\071\065\072\104\073\075\074\061" +
    "\076\077\077\044\101\107\102\037\103\071\104\073\106" +
    "\146\107\036\110\110\111\050\112\113\113\064\001\002" +
    "\000\116\004\uff5f\005\uff5f\006\uff5f\007\uff5f\010\uff5f\011" +
    "\uff5f\012\uff5f\013\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f" +
    "\020\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f\025\uff5f\026" +
    "\uff5f\027\uff5f\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f" +
    "\035\uff5f\036\uff5f\037\uff5f\040\uff5f\043\uff5f\044\uff5f\045" +
    "\uff5f\051\uff5f\052\uff5f\053\uff5f\055\uff5f\056\uff5f\057\uff5f" +
    "\001\002\000\042\037\032\040\043\041\117\042\056\043" +
    "\045\044\057\050\112\052\031\103\071\104\073\106\146" +
    "\107\036\110\110\111\050\112\113\113\064\001\002\000" +
    "\046\015\uff91\016\uff91\020\215\024\uff91\025\uff91\026\uff91" +
    "\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035" +
    "\uff91\036\uff91\051\uff91\053\uff91\055\uff91\056\uff91\001\002" +
    "\000\106\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011" +
    "\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b" +
    "\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026" +
    "\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b" +
    "\035\uff7b\036\uff7b\043\uff7b\044\uff7b\045\uff7b\051\uff7b\053" +
    "\uff7b\055\uff7b\056\uff7b\001\002\000\004\055\301\001\002" +
    "\000\006\064\125\106\266\001\002\000\066\007\200\010" +
    "\201\011\202\012\176\013\uff88\014\uff88\015\uff88\016\uff88" +
    "\017\uff88\020\uff88\021\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88" +
    "\036\uff88\051\uff88\053\uff88\055\uff88\056\uff88\001\002\000" +
    "\116\004\uff5e\005\uff5e\006\uff5e\007\uff5e\010\uff5e\011\uff5e" +
    "\012\uff5e\013\uff5e\014\uff5e\015\uff5e\016\uff5e\017\uff5e\020" +
    "\uff5e\021\uff5e\022\uff5e\023\uff5e\024\uff5e\025\uff5e\026\uff5e" +
    "\027\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035" +
    "\uff5e\036\uff5e\037\uff5e\040\uff5e\043\uff5e\044\uff5e\045\uff5e" +
    "\051\uff5e\052\uff5e\053\uff5e\055\uff5e\056\uff5e\057\uff5e\001" +
    "\002\000\116\004\uff67\005\uff67\006\uff67\007\uff67\010\uff67" +
    "\011\uff67\012\uff67\013\uff67\014\uff67\015\uff67\016\uff67\017" +
    "\uff67\020\uff67\021\uff67\022\uff67\023\uff67\024\uff67\025\uff67" +
    "\026\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034" +
    "\uff67\035\uff67\036\uff67\037\uff67\040\uff67\043\uff67\044\uff67" +
    "\045\uff67\051\uff67\052\uff67\053\uff67\055\uff67\056\uff67\057" +
    "\uff67\001\002\000\004\055\uffd5\001\002\000\050\015\uff8f" +
    "\016\uff8f\020\uff8f\021\217\024\uff8f\025\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f" +
    "\036\uff8f\051\uff8f\053\uff8f\055\uff8f\056\uff8f\001\002\000" +
    "\004\050\260\001\002\000\116\004\uff5d\005\uff5d\006\uff5d" +
    "\007\uff5d\010\uff5d\011\uff5d\012\uff5d\013\uff5d\014\uff5d\015" +
    "\uff5d\016\uff5d\017\uff5d\020\uff5d\021\uff5d\022\uff5d\023\uff5d" +
    "\024\uff5d\025\uff5d\026\uff5d\027\uff5d\030\uff5d\031\uff5d\032" +
    "\uff5d\033\uff5d\034\uff5d\035\uff5d\036\uff5d\037\uff5d\040\uff5d" +
    "\043\uff5d\044\uff5d\045\uff5d\051\uff5d\052\uff5d\053\uff5d\055" +
    "\uff5d\056\uff5d\057\uff5d\001\002\000\116\004\uff74\005\uff74" +
    "\006\uff74\007\uff74\010\uff74\011\uff74\012\uff74\013\uff74\014" +
    "\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\022\uff74" +
    "\023\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031" +
    "\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\252" +
    "\040\251\043\uff74\044\uff74\045\uff74\051\uff74\052\254\053" +
    "\uff74\055\uff74\056\uff74\057\253\001\002\000\006\050\233" +
    "\060\234\001\002\000\070\003\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\044\uffeb\046\uffeb\047\uffeb\050\uffeb" +
    "\052\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\076\uffeb\077" +
    "\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb\106\uffeb\107\uffeb" +
    "\110\uffeb\111\uffeb\112\uffeb\113\uffeb\001\002\000\004\055" +
    "\uffd6\001\002\000\070\003\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2\052" +
    "\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\076\uffe2\077\uffe2" +
    "\101\uffe2\102\uffe2\103\uffe2\104\uffe2\106\uffe2\107\uffe2\110" +
    "\uffe2\111\uffe2\112\uffe2\113\uffe2\001\002\000\116\004\uff6b" +
    "\005\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013" +
    "\uff6b\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b" +
    "\022\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030" +
    "\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b" +
    "\037\uff6b\040\uff6b\043\uff6b\044\uff6b\045\uff6b\051\uff6b\052" +
    "\uff6b\053\uff6b\055\uff6b\056\uff6b\057\uff6b\001\002\000\004" +
    "\050\223\001\002\000\116\004\uff62\005\uff62\006\uff62\007" +
    "\uff62\010\uff62\011\uff62\012\uff62\013\uff62\014\uff62\015\uff62" +
    "\016\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024" +
    "\uff62\025\uff62\026\uff62\027\uff62\030\uff62\031\uff62\032\uff62" +
    "\033\uff62\034\uff62\035\uff62\036\uff62\037\uff62\040\uff62\043" +
    "\uff62\044\uff62\045\uff62\051\uff62\052\uff62\053\uff62\055\uff62" +
    "\056\uff62\057\uff62\001\002\000\044\015\213\016\uff93\024" +
    "\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93" +
    "\033\uff93\034\uff93\035\uff93\036\uff93\051\uff93\053\uff93\055" +
    "\uff93\056\uff93\001\002\000\042\037\032\040\043\041\117" +
    "\042\056\043\045\044\057\050\112\052\031\103\071\104" +
    "\073\106\146\107\036\110\110\111\050\112\113\113\064" +
    "\001\002\000\116\004\uff61\005\uff61\006\uff61\007\uff61\010" +
    "\uff61\011\uff61\012\uff61\013\uff61\014\uff61\015\uff61\016\uff61" +
    "\017\uff61\020\uff61\021\uff61\022\uff61\023\uff61\024\uff61\025" +
    "\uff61\026\uff61\027\uff61\030\uff61\031\uff61\032\uff61\033\uff61" +
    "\034\uff61\035\uff61\036\uff61\037\uff61\040\uff61\043\uff61\044" +
    "\uff61\045\uff61\051\uff61\052\uff61\053\uff61\055\uff61\056\uff61" +
    "\057\uff61\001\002\000\072\003\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\052\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076" +
    "\uffdb\077\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\106\uffdb" +
    "\107\uffdb\110\uffdb\111\uffdb\112\uffdb\113\uffdb\001\002\000" +
    "\074\003\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\046\uffb6\047\uffb6\050\uffb6\052\uffb6\062\uffb6\063" +
    "\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\076\uffb6\077\uffb6" +
    "\101\uffb6\102\uffb6\103\uffb6\104\uffb6\106\uffb6\107\uffb6\110" +
    "\uffb6\111\uffb6\112\uffb6\113\uffb6\001\002\000\056\013\174" +
    "\014\173\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\024" +
    "\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\033\uff8b\034\uff8b\035\uff8b\036\uff8b\051\uff8b\053\uff8b\055" +
    "\uff8b\056\uff8b\001\002\000\042\037\032\040\043\041\117" +
    "\042\056\043\045\044\057\050\112\052\031\103\071\104" +
    "\073\106\146\107\036\110\110\111\050\112\113\113\064" +
    "\001\002\000\066\003\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\046\uffd0\050\uffd0\052\uffd0\071\uffd0" +
    "\072\uffd0\073\uffd0\074\uffd0\076\uffd0\077\uffd0\101\uffd0\102" +
    "\uffd0\103\uffd0\104\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0" +
    "\112\uffd0\113\uffd0\001\002\000\066\003\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\046\uffd0\050\uffd0" +
    "\052\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\076\uffd0\077" +
    "\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\106\uffd0\107\uffd0" +
    "\110\uffd0\111\uffd0\112\uffd0\113\uffd0\001\002\000\100\007" +
    "\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83" +
    "\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024" +
    "\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83" +
    "\033\uff83\034\uff83\035\uff83\036\uff83\043\144\044\143\045" +
    "\145\051\uff83\053\uff83\055\uff83\056\uff83\001\002\000\116" +
    "\004\uff64\005\uff64\006\uff64\007\uff64\010\uff64\011\uff64\012" +
    "\uff64\013\uff64\014\uff64\015\uff64\016\uff64\017\uff64\020\uff64" +
    "\021\uff64\022\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027" +
    "\uff64\030\uff64\031\uff64\032\uff64\033\uff64\034\uff64\035\uff64" +
    "\036\uff64\037\uff64\040\uff64\043\uff64\044\uff64\045\uff64\050" +
    "\uff6a\052\uff64\054\124\055\uff64\057\uff64\060\uff6a\001\002" +
    "\000\006\064\125\106\130\001\002\000\004\065\141\001" +
    "\002\000\016\046\uffc7\051\uffc7\052\uffc7\055\uffc7\056\uffc7" +
    "\061\uffc7\001\002\000\004\055\140\001\002\000\020\046" +
    "\uffc8\051\uffc8\052\uffc8\055\uffc8\056\uffc8\060\132\061\uffc8" +
    "\001\002\000\016\046\uffc6\051\uffc6\052\uffc6\055\uffc6\056" +
    "\uffc6\061\uffc6\001\002\000\006\064\125\106\130\001\002" +
    "\000\006\056\135\061\136\001\002\000\006\056\uffc3\061" +
    "\uffc3\001\002\000\006\064\125\106\130\001\002\000\016" +
    "\046\uffc4\051\uffc4\052\uffc4\055\uffc4\056\uffc4\061\uffc4\001" +
    "\002\000\006\056\uffc2\061\uffc2\001\002\000\102\002\uffa9" +
    "\003\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\052\uffa9\062\uffa9\063\uffa9" +
    "\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\076\uffa9\077" +
    "\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9" +
    "\107\uffa9\110\uffa9\111\uffa9\112\uffa9\113\uffa9\001\002\000" +
    "\006\064\125\106\130\001\002\000\016\046\uffc5\051\uffc5" +
    "\052\uffc5\055\uffc5\056\uffc5\061\uffc5\001\002\000\042\037" +
    "\032\040\043\041\117\042\056\043\045\044\057\050\112" +
    "\052\031\103\071\104\073\106\146\107\036\110\110\111" +
    "\050\112\113\113\064\001\002\000\042\037\032\040\043" +
    "\041\117\042\056\043\045\044\057\050\112\052\031\103" +
    "\071\104\073\106\146\107\036\110\110\111\050\112\113" +
    "\113\064\001\002\000\042\037\032\040\043\041\117\042" +
    "\056\043\045\044\057\050\112\052\031\103\071\104\073" +
    "\106\146\107\036\110\110\111\050\112\113\113\064\001" +
    "\002\000\122\004\uff64\005\uff64\006\uff64\007\uff64\010\uff64" +
    "\011\uff64\012\uff64\013\uff64\014\uff64\015\uff64\016\uff64\017" +
    "\uff64\020\uff64\021\uff64\022\uff64\023\uff64\024\uff64\025\uff64" +
    "\026\uff64\027\uff64\030\uff64\031\uff64\032\uff64\033\uff64\034" +
    "\uff64\035\uff64\036\uff64\037\uff64\040\uff64\043\uff64\044\uff64" +
    "\045\uff64\050\uff6a\051\uff64\052\uff64\053\uff64\055\uff64\056" +
    "\uff64\057\uff64\060\uff6a\001\002\000\106\004\152\005\151" +
    "\006\150\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80\014" +
    "\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80" +
    "\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031" +
    "\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80\043\uff80" +
    "\044\uff80\045\uff80\051\uff80\053\uff80\055\uff80\056\uff80\001" +
    "\002\000\042\037\032\040\043\041\117\042\056\043\045" +
    "\044\057\050\112\052\031\103\071\104\073\106\146\107" +
    "\036\110\110\111\050\112\113\113\064\001\002\000\042" +
    "\037\032\040\043\041\117\042\056\043\045\044\057\050" +
    "\112\052\031\103\071\104\073\106\146\107\036\110\110" +
    "\111\050\112\113\113\064\001\002\000\042\037\032\040" +
    "\043\041\117\042\056\043\045\044\057\050\112\052\031" +
    "\103\071\104\073\106\146\107\036\110\110\111\050\112" +
    "\113\113\064\001\002\000\106\004\uff7e\005\uff7e\006\uff7e" +
    "\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015" +
    "\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e" +
    "\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\043\uff7e\044\uff7e" +
    "\045\uff7e\051\uff7e\053\uff7e\055\uff7e\056\uff7e\001\002\000" +
    "\106\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d" +
    "\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020" +
    "\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d" +
    "\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035" +
    "\uff7d\036\uff7d\043\uff7d\044\uff7d\045\uff7d\051\uff7d\053\uff7d" +
    "\055\uff7d\056\uff7d\001\002\000\106\004\uff7c\005\uff7c\006" +
    "\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023" +
    "\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c" +
    "\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\043\uff7c\044" +
    "\uff7c\045\uff7c\051\uff7c\053\uff7c\055\uff7c\056\uff7c\001\002" +
    "\000\106\004\152\005\151\006\150\007\uff82\010\uff82\011" +
    "\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82" +
    "\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82" +
    "\035\uff82\036\uff82\043\uff82\044\uff82\045\uff82\051\uff82\053" +
    "\uff82\055\uff82\056\uff82\001\002\000\106\004\152\005\151" +
    "\006\150\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014" +
    "\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81" +
    "\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031" +
    "\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81\043\uff81" +
    "\044\uff81\045\uff81\051\uff81\053\uff81\055\uff81\056\uff81\001" +
    "\002\000\066\003\070\037\032\040\043\041\117\042\056" +
    "\043\045\044\057\046\103\050\112\052\031\071\065\072" +
    "\104\073\075\074\061\076\077\077\044\101\107\102\037" +
    "\103\071\104\073\106\146\107\036\110\110\111\050\112" +
    "\113\113\064\001\002\000\072\003\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\052\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf" +
    "\076\uffcf\077\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\106" +
    "\uffcf\107\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf\001\002" +
    "\000\070\003\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf\052\uffcf\071\uffcf" +
    "\072\uffcf\073\uffcf\074\uffcf\076\uffcf\077\uffcf\101\uffcf\102" +
    "\uffcf\103\uffcf\104\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf" +
    "\112\uffcf\113\uffcf\001\002\000\070\003\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\046\uffce\047\uffce" +
    "\050\uffce\052\uffce\071\uffce\072\uffce\073\uffce\074\uffce\076" +
    "\uffce\077\uffce\101\uffce\102\uffce\103\uffce\104\uffce\106\uffce" +
    "\107\uffce\110\uffce\111\uffce\112\uffce\113\uffce\001\002\000" +
    "\072\003\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\046\uffd3\047\uffd3\050\uffd3\052\uffd3\071\uffd3\072" +
    "\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\101\uffd3" +
    "\102\uffd3\103\uffd3\104\uffd3\106\uffd3\107\uffd3\110\uffd3\111" +
    "\uffd3\112\uffd3\113\uffd3\001\002\000\066\003\070\037\032" +
    "\040\043\041\117\042\056\043\045\044\057\046\103\050" +
    "\112\052\031\071\065\072\104\073\075\074\061\076\077" +
    "\077\044\101\107\102\037\103\071\104\073\106\146\107" +
    "\036\110\110\111\050\112\113\113\064\001\002\000\072" +
    "\003\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\052\uffcf\071\uffcf\072\uffcf" +
    "\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\101\uffcf\102" +
    "\uffcf\103\uffcf\104\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf" +
    "\112\uffcf\113\uffcf\001\002\000\070\003\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\052\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\076" +
    "\uffcf\077\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\106\uffcf" +
    "\107\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf\001\002\000" +
    "\070\003\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\046\uffcd\047\uffcd\050\uffcd\052\uffcd\071\uffcd\072" +
    "\uffcd\073\uffcd\074\uffcd\076\uffcd\077\uffcd\101\uffcd\102\uffcd" +
    "\103\uffcd\104\uffcd\106\uffcd\107\uffcd\110\uffcd\111\uffcd\112" +
    "\uffcd\113\uffcd\001\002\000\072\003\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\052\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2" +
    "\076\uffd2\077\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\106" +
    "\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2\113\uffd2\001\002" +
    "\000\106\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011" +
    "\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016\uff78\017\uff78" +
    "\020\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025\uff78\026" +
    "\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78" +
    "\035\uff78\036\uff78\043\uff78\044\uff78\045\uff78\051\uff78\053" +
    "\uff78\055\uff78\056\uff78\001\002\000\042\037\032\040\043" +
    "\041\117\042\056\043\045\044\057\050\112\052\031\103" +
    "\071\104\073\106\146\107\036\110\110\111\050\112\113" +
    "\113\064\001\002\000\042\037\032\040\043\041\117\042" +
    "\056\043\045\044\057\050\112\052\031\103\071\104\073" +
    "\106\146\107\036\110\110\111\050\112\113\113\064\001" +
    "\002\000\066\007\200\010\201\011\202\012\176\013\uff8a" +
    "\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\024" +
    "\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a" +
    "\033\uff8a\034\uff8a\035\uff8a\036\uff8a\051\uff8a\053\uff8a\055" +
    "\uff8a\056\uff8a\001\002\000\042\037\uff98\040\uff98\041\uff98" +
    "\042\uff98\043\uff98\044\uff98\050\uff98\052\uff98\103\uff98\104" +
    "\uff98\106\uff98\107\uff98\110\uff98\111\uff98\112\uff98\113\uff98" +
    "\001\002\000\042\037\032\040\043\041\117\042\056\043" +
    "\045\044\057\050\112\052\031\103\071\104\073\106\146" +
    "\107\036\110\110\111\050\112\113\113\064\001\002\000" +
    "\042\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\050\uff9b\052\uff9b\103\uff9b\104\uff9b\106\uff9b\107\uff9b\110" +
    "\uff9b\111\uff9b\112\uff9b\113\uff9b\001\002\000\042\037\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\050\uff99\052" +
    "\uff99\103\uff99\104\uff99\106\uff99\107\uff99\110\uff99\111\uff99" +
    "\112\uff99\113\uff99\001\002\000\042\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\044\uff9a\050\uff9a\052\uff9a\103\uff9a" +
    "\104\uff9a\106\uff9a\107\uff9a\110\uff9a\111\uff9a\112\uff9a\113" +
    "\uff9a\001\002\000\072\007\uff87\010\uff87\011\uff87\012\uff87" +
    "\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021" +
    "\uff87\022\205\023\204\024\uff87\025\uff87\026\uff87\027\uff87" +
    "\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036" +
    "\uff87\051\uff87\053\uff87\055\uff87\056\uff87\001\002\000\042" +
    "\037\032\040\043\041\117\042\056\043\045\044\057\050" +
    "\112\052\031\103\071\104\073\106\146\107\036\110\110" +
    "\111\050\112\113\113\064\001\002\000\042\037\032\040" +
    "\043\041\117\042\056\043\045\044\057\050\112\052\031" +
    "\103\071\104\073\106\146\107\036\110\110\111\050\112" +
    "\113\113\064\001\002\000\100\007\uff85\010\uff85\011\uff85" +
    "\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020" +
    "\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85" +
    "\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035" +
    "\uff85\036\uff85\043\144\044\143\045\145\051\uff85\053\uff85" +
    "\055\uff85\056\uff85\001\002\000\100\007\uff84\010\uff84\011" +
    "\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017\uff84" +
    "\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84" +
    "\035\uff84\036\uff84\043\144\044\143\045\145\051\uff84\053" +
    "\uff84\055\uff84\056\uff84\001\002\000\066\007\200\010\201" +
    "\011\202\012\176\013\uff89\014\uff89\015\uff89\016\uff89\017" +
    "\uff89\020\uff89\021\uff89\024\uff89\025\uff89\026\uff89\027\uff89" +
    "\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036" +
    "\uff89\051\uff89\053\uff89\055\uff89\056\uff89\001\002\000\004" +
    "\051\212\001\002\000\116\004\uff68\005\uff68\006\uff68\007" +
    "\uff68\010\uff68\011\uff68\012\uff68\013\uff68\014\uff68\015\uff68" +
    "\016\uff68\017\uff68\020\uff68\021\uff68\022\uff68\023\uff68\024" +
    "\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68\032\uff68" +
    "\033\uff68\034\uff68\035\uff68\036\uff68\037\uff68\040\uff68\043" +
    "\uff68\044\uff68\045\uff68\051\uff68\052\uff68\053\uff68\055\uff68" +
    "\056\uff68\057\uff68\001\002\000\042\037\032\040\043\041" +
    "\117\042\056\043\045\044\057\050\112\052\031\103\071" +
    "\104\073\106\146\107\036\110\110\111\050\112\113\113" +
    "\064\001\002\000\046\015\uff92\016\uff92\020\215\024\uff92" +
    "\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033" +
    "\uff92\034\uff92\035\uff92\036\uff92\051\uff92\053\uff92\055\uff92" +
    "\056\uff92\001\002\000\042\037\032\040\043\041\117\042" +
    "\056\043\045\044\057\050\112\052\031\103\071\104\073" +
    "\106\146\107\036\110\110\111\050\112\113\113\064\001" +
    "\002\000\050\015\uff90\016\uff90\020\uff90\021\217\024\uff90" +
    "\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033" +
    "\uff90\034\uff90\035\uff90\036\uff90\051\uff90\053\uff90\055\uff90" +
    "\056\uff90\001\002\000\042\037\032\040\043\041\117\042" +
    "\056\043\045\044\057\050\112\052\031\103\071\104\073" +
    "\106\146\107\036\110\110\111\050\112\113\113\064\001" +
    "\002\000\052\015\uff8e\016\uff8e\017\221\020\uff8e\021\uff8e" +
    "\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032" +
    "\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\051\uff8e\053\uff8e" +
    "\055\uff8e\056\uff8e\001\002\000\042\037\032\040\043\041" +
    "\117\042\056\043\045\044\057\050\112\052\031\103\071" +
    "\104\073\106\146\107\036\110\110\111\050\112\113\113" +
    "\064\001\002\000\056\013\174\014\173\015\uff8c\016\uff8c" +
    "\017\uff8c\020\uff8c\021\uff8c\024\uff8c\025\uff8c\026\uff8c\027" +
    "\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c" +
    "\036\uff8c\051\uff8c\053\uff8c\055\uff8c\056\uff8c\001\002\000" +
    "\042\037\032\040\043\041\117\042\056\043\045\044\057" +
    "\050\112\052\031\103\071\104\073\106\146\107\036\110" +
    "\110\111\050\112\113\113\064\001\002\000\004\051\225" +
    "\001\002\000\066\003\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\044\uffca\046\uffca\050\uffca\052\uffca\071\uffca" +
    "\072\uffca\073\uffca\074\uffca\076\uffca\077\uffca\101\uffca\102" +
    "\uffca\103\uffca\104\uffca\106\uffca\107\uffca\110\uffca\111\uffca" +
    "\112\uffca\113\uffca\001\002\000\070\003\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\052\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\076" +
    "\uffb5\077\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\106\uffb5" +
    "\107\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5\001\002\000" +
    "\070\003\070\037\032\040\043\041\117\042\056\043\045" +
    "\044\057\046\103\047\uffe6\050\112\052\031\071\065\072" +
    "\104\073\075\074\061\076\077\077\044\101\107\102\037" +
    "\103\071\104\073\106\123\107\036\110\110\111\050\112" +
    "\113\113\064\001\002\000\004\047\uffea\001\002\000\004" +
    "\047\232\001\002\000\072\003\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\052\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\076" +
    "\uffe8\077\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8\106\uffe8" +
    "\107\uffe8\110\uffe8\111\uffe8\112\uffe8\113\uffe8\001\002\000" +
    "\044\037\032\040\043\041\117\042\056\043\045\044\057" +
    "\050\112\051\246\052\031\103\071\104\073\106\146\107" +
    "\036\110\110\111\050\112\113\113\064\001\002\000\006" +
    "\064\125\106\130\001\002\000\006\056\135\061\236\001" +
    "\002\000\004\050\237\001\002\000\044\037\032\040\043" +
    "\041\117\042\056\043\045\044\057\050\112\051\240\052" +
    "\031\103\071\104\073\106\146\107\036\110\110\111\050" +
    "\112\113\113\064\001\002\000\116\004\uff70\005\uff70\006" +
    "\uff70\007\uff70\010\uff70\011\uff70\012\uff70\013\uff70\014\uff70" +
    "\015\uff70\016\uff70\017\uff70\020\uff70\021\uff70\022\uff70\023" +
    "\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70\031\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040" +
    "\uff70\043\uff70\044\uff70\045\uff70\051\uff70\052\uff70\053\uff70" +
    "\055\uff70\056\uff70\057\uff70\001\002\000\010\051\uffa8\053" +
    "\uffa8\056\uffa8\001\002\000\006\051\244\056\243\001\002" +
    "\000\042\037\032\040\043\041\117\042\056\043\045\044" +
    "\057\050\112\052\031\103\071\104\073\106\146\107\036" +
    "\110\110\111\050\112\113\113\064\001\002\000\116\004" +
    "\uff71\005\uff71\006\uff71\007\uff71\010\uff71\011\uff71\012\uff71" +
    "\013\uff71\014\uff71\015\uff71\016\uff71\017\uff71\020\uff71\021" +
    "\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71\027\uff71" +
    "\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71\036" +
    "\uff71\037\uff71\040\uff71\043\uff71\044\uff71\045\uff71\051\uff71" +
    "\052\uff71\053\uff71\055\uff71\056\uff71\057\uff71\001\002\000" +
    "\010\051\uffa7\053\uffa7\056\uffa7\001\002\000\116\004\uff73" +
    "\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73\012\uff73\013" +
    "\uff73\014\uff73\015\uff73\016\uff73\017\uff73\020\uff73\021\uff73" +
    "\022\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030" +
    "\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73" +
    "\037\uff73\040\uff73\043\uff73\044\uff73\045\uff73\051\uff73\052" +
    "\uff73\053\uff73\055\uff73\056\uff73\057\uff73\001\002\000\006" +
    "\051\250\056\243\001\002\000\116\004\uff72\005\uff72\006" +
    "\uff72\007\uff72\010\uff72\011\uff72\012\uff72\013\uff72\014\uff72" +
    "\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72\022\uff72\023" +
    "\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72" +
    "\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\043\uff72\044\uff72\045\uff72\051\uff72\052\uff72\053\uff72" +
    "\055\uff72\056\uff72\057\uff72\001\002\000\116\004\uff6c\005" +
    "\uff6c\006\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c\013\uff6c" +
    "\014\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c\022" +
    "\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c" +
    "\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c\036\uff6c\037" +
    "\uff6c\040\uff6c\043\uff6c\044\uff6c\045\uff6c\051\uff6c\052\uff6c" +
    "\053\uff6c\055\uff6c\056\uff6c\057\uff6c\001\002\000\116\004" +
    "\uff6d\005\uff6d\006\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d" +
    "\013\uff6d\014\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021" +
    "\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d" +
    "\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036" +
    "\uff6d\037\uff6d\040\uff6d\043\uff6d\044\uff6d\045\uff6d\051\uff6d" +
    "\052\uff6d\053\uff6d\055\uff6d\056\uff6d\057\uff6d\001\002\000" +
    "\004\106\257\001\002\000\042\037\032\040\043\041\117" +
    "\042\056\043\045\044\057\050\112\052\031\103\071\104" +
    "\073\106\146\107\036\110\110\111\050\112\113\113\064" +
    "\001\002\000\004\053\256\001\002\000\116\004\uff6e\005" +
    "\uff6e\006\uff6e\007\uff6e\010\uff6e\011\uff6e\012\uff6e\013\uff6e" +
    "\014\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e\022" +
    "\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e" +
    "\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037" +
    "\uff6e\040\uff6e\043\uff6e\044\uff6e\045\uff6e\051\uff6e\052\uff6e" +
    "\053\uff6e\055\uff6e\056\uff6e\057\uff6e\001\002\000\122\004" +
    "\uff6f\005\uff6f\006\uff6f\007\uff6f\010\uff6f\011\uff6f\012\uff6f" +
    "\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020\uff6f\021" +
    "\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f" +
    "\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036" +
    "\uff6f\037\uff6f\040\uff6f\043\uff6f\044\uff6f\045\uff6f\050\uff69" +
    "\051\uff6f\052\uff6f\053\uff6f\055\uff6f\056\uff6f\057\uff6f\060" +
    "\uff69\001\002\000\004\106\261\001\002\000\004\100\262" +
    "\001\002\000\042\037\032\040\043\041\117\042\056\043" +
    "\045\044\057\050\112\052\031\103\071\104\073\106\146" +
    "\107\036\110\110\111\050\112\113\113\064\001\002\000" +
    "\004\051\264\001\002\000\066\003\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb\050\uffcb\052" +
    "\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\076\uffcb\077\uffcb" +
    "\101\uffcb\102\uffcb\103\uffcb\104\uffcb\106\uffcb\107\uffcb\110" +
    "\uffcb\111\uffcb\112\uffcb\113\uffcb\001\002\000\004\052\276" +
    "\001\002\000\010\050\267\052\uffc8\060\270\001\002\000" +
    "\004\051\275\001\002\000\006\064\125\106\130\001\002" +
    "\000\006\056\135\061\272\001\002\000\006\050\273\052" +
    "\uffc4\001\002\000\004\051\274\001\002\000\116\004\uff65" +
    "\005\uff65\006\uff65\007\uff65\010\uff65\011\uff65\012\uff65\013" +
    "\uff65\014\uff65\015\uff65\016\uff65\017\uff65\020\uff65\021\uff65" +
    "\022\uff65\023\uff65\024\uff65\025\uff65\026\uff65\027\uff65\030" +
    "\uff65\031\uff65\032\uff65\033\uff65\034\uff65\035\uff65\036\uff65" +
    "\037\uff65\040\uff65\043\uff65\044\uff65\045\uff65\051\uff65\052" +
    "\uff65\053\uff65\055\uff65\056\uff65\057\uff65\001\002\000\116" +
    "\004\uff66\005\uff66\006\uff66\007\uff66\010\uff66\011\uff66\012" +
    "\uff66\013\uff66\014\uff66\015\uff66\016\uff66\017\uff66\020\uff66" +
    "\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027" +
    "\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66" +
    "\036\uff66\037\uff66\040\uff66\043\uff66\044\uff66\045\uff66\051" +
    "\uff66\052\uff66\053\uff66\055\uff66\056\uff66\057\uff66\001\002" +
    "\000\042\037\032\040\043\041\117\042\056\043\045\044" +
    "\057\050\112\052\031\103\071\104\073\106\146\107\036" +
    "\110\110\111\050\112\113\113\064\001\002\000\004\053" +
    "\300\001\002\000\116\004\uff5b\005\uff5b\006\uff5b\007\uff5b" +
    "\010\uff5b\011\uff5b\012\uff5b\013\uff5b\014\uff5b\015\uff5b\016" +
    "\uff5b\017\uff5b\020\uff5b\021\uff5b\022\uff5b\023\uff5b\024\uff5b" +
    "\025\uff5b\026\uff5b\027\uff5b\030\uff5b\031\uff5b\032\uff5b\033" +
    "\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b\040\uff5b\043\uff5b" +
    "\044\uff5b\045\uff5b\051\uff5b\052\uff5b\053\uff5b\055\uff5b\056" +
    "\uff5b\057\uff5b\001\002\000\072\003\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\052\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9" +
    "\076\uffd9\077\uffd9\101\uffd9\102\uffd9\103\uffd9\104\uffd9\106" +
    "\uffd9\107\uffd9\110\uffd9\111\uffd9\112\uffd9\113\uffd9\001\002" +
    "\000\004\055\uffd7\001\002\000\004\047\uffe7\001\002\000" +
    "\042\037\032\040\043\041\117\042\056\043\045\044\057" +
    "\050\112\052\031\103\071\104\073\106\146\107\036\110" +
    "\110\111\050\112\113\113\064\001\002\000\004\051\306" +
    "\001\002\000\066\003\070\037\032\040\043\041\117\042" +
    "\056\043\045\044\057\046\103\050\112\052\031\071\065" +
    "\072\104\073\075\074\061\076\077\077\044\101\107\102" +
    "\037\103\071\104\073\106\146\107\036\110\110\111\050" +
    "\112\113\113\064\001\002\000\072\003\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\046\uffe4\047\uffe4" +
    "\050\uffe4\052\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075" +
    "\311\076\uffe4\077\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4" +
    "\106\uffe4\107\uffe4\110\uffe4\111\uffe4\112\uffe4\113\uffe4\001" +
    "\002\000\070\003\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\046\uffe0\047\uffe0\050\uffe0\052\uffe0\071" +
    "\uffe0\072\uffe0\073\uffe0\074\uffe0\076\uffe0\077\uffe0\101\uffe0" +
    "\102\uffe0\103\uffe0\104\uffe0\106\uffe0\107\uffe0\110\uffe0\111" +
    "\uffe0\112\uffe0\113\uffe0\001\002\000\066\003\070\037\032" +
    "\040\043\041\117\042\056\043\045\044\057\046\103\050" +
    "\112\052\031\071\065\072\104\073\075\074\061\076\077" +
    "\077\044\101\107\102\037\103\071\104\073\106\146\107" +
    "\036\110\110\111\050\112\113\113\064\001\002\000\072" +
    "\003\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\052\uffd4\071\uffd4\072\uffd4" +
    "\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\101\uffd4\102" +
    "\uffd4\103\uffd4\104\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4" +
    "\112\uffd4\113\uffd4\001\002\000\070\003\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\052\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\076" +
    "\uffdf\077\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\106\uffdf" +
    "\107\uffdf\110\uffdf\111\uffdf\112\uffdf\113\uffdf\001\002\000" +
    "\106\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76" +
    "\012\uff76\013\uff76\014\uff76\015\uff76\016\uff76\017\uff76\020" +
    "\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025\uff76\026\uff76" +
    "\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035" +
    "\uff76\036\uff76\043\uff76\044\uff76\045\uff76\051\uff76\053\uff76" +
    "\055\uff76\056\uff76\001\002\000\106\004\uff77\005\uff77\006" +
    "\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77" +
    "\015\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77\023" +
    "\uff77\024\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77" +
    "\032\uff77\033\uff77\034\uff77\035\uff77\036\uff77\043\uff77\044" +
    "\uff77\045\uff77\051\uff77\053\uff77\055\uff77\056\uff77\001\002" +
    "\000\066\003\070\037\032\040\043\041\117\042\056\043" +
    "\045\044\057\046\103\050\112\052\031\071\065\072\104" +
    "\073\075\074\061\076\077\077\044\101\107\102\037\103" +
    "\071\104\073\106\146\107\036\110\110\111\050\112\113" +
    "\113\064\001\002\000\072\003\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\052\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076" +
    "\uffcf\077\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\106\uffcf" +
    "\107\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf\001\002\000" +
    "\070\003\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\046\uffcf\047\uffcf\050\uffcf\052\uffcf\071\uffcf\072" +
    "\uffcf\073\uffcf\074\uffcf\076\uffcf\077\uffcf\101\uffcf\102\uffcf" +
    "\103\uffcf\104\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf\112" +
    "\uffcf\113\uffcf\001\002\000\070\003\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\052\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\076\uffcc" +
    "\077\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc\106\uffcc\107" +
    "\uffcc\110\uffcc\111\uffcc\112\uffcc\113\uffcc\001\002\000\072" +
    "\003\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\052\uffd1\071\uffd1\072\uffd1" +
    "\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\101\uffd1\102" +
    "\uffd1\103\uffd1\104\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1" +
    "\112\uffd1\113\uffd1\001\002\000\106\004\uff75\005\uff75\006" +
    "\uff75\007\uff75\010\uff75\011\uff75\012\uff75\013\uff75\014\uff75" +
    "\015\uff75\016\uff75\017\uff75\020\uff75\021\uff75\022\uff75\023" +
    "\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75" +
    "\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75\043\uff75\044" +
    "\uff75\045\uff75\051\uff75\053\uff75\055\uff75\056\uff75\001\002" +
    "\000\042\037\032\040\043\041\117\042\056\043\045\044" +
    "\057\050\112\052\031\103\071\104\073\106\146\107\036" +
    "\110\110\111\050\112\113\113\064\001\002\000\004\055" +
    "\326\001\002\000\042\037\032\040\043\041\117\042\056" +
    "\043\045\044\057\050\112\052\031\103\071\104\073\106" +
    "\146\107\036\110\110\111\050\112\113\113\064\001\002" +
    "\000\004\055\330\001\002\000\042\037\032\040\043\041" +
    "\117\042\056\043\045\044\057\050\112\052\031\103\071" +
    "\104\073\106\146\107\036\110\110\111\050\112\113\113" +
    "\064\001\002\000\004\051\332\001\002\000\066\003\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\046" +
    "\uffc9\050\uffc9\052\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9" +
    "\076\uffc9\077\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\106" +
    "\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9\001\002" +
    "\000\106\004\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011" +
    "\uff79\012\uff79\013\uff79\014\uff79\015\uff79\016\uff79\017\uff79" +
    "\020\uff79\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79\026" +
    "\uff79\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79" +
    "\035\uff79\036\uff79\043\uff79\044\uff79\045\uff79\051\uff79\053" +
    "\uff79\055\uff79\056\uff79\001\002\000\042\037\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\050\uffa2\052\uffa2\103" +
    "\uffa2\104\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2" +
    "\113\uffa2\001\002\000\042\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\044\uffa0\050\uffa0\052\uffa0\103\uffa0\104\uffa0" +
    "\106\uffa0\107\uffa0\110\uffa0\111\uffa0\112\uffa0\113\uffa0\001" +
    "\002\000\042\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\050\uff9d\052\uff9d\103\uff9d\104\uff9d\106\uff9d\107" +
    "\uff9d\110\uff9d\111\uff9d\112\uff9d\113\uff9d\001\002\000\042" +
    "\037\032\040\043\041\117\042\056\043\045\044\057\050" +
    "\112\052\031\103\071\104\073\106\146\107\036\110\110" +
    "\111\050\112\113\113\064\001\002\000\042\037\uff9c\040" +
    "\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\050\uff9c\052\uff9c" +
    "\103\uff9c\104\uff9c\106\uff9c\107\uff9c\110\uff9c\111\uff9c\112" +
    "\uff9c\113\uff9c\001\002\000\042\037\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\050\uffa1\052\uffa1\103\uffa1\104" +
    "\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1\112\uffa1\113\uffa1" +
    "\001\002\000\042\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\050\uffa4\052\uffa4\103\uffa4\104\uffa4\106\uffa4" +
    "\107\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4\001\002\000" +
    "\042\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\050\uff9f\052\uff9f\103\uff9f\104\uff9f\106\uff9f\107\uff9f\110" +
    "\uff9f\111\uff9f\112\uff9f\113\uff9f\001\002\000\042\037\032" +
    "\040\043\041\117\042\056\043\045\044\057\050\112\052" +
    "\031\103\071\104\073\106\146\107\036\110\110\111\050" +
    "\112\113\113\064\001\002\000\042\037\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\044\uff9e\050\uff9e\052\uff9e\103\uff9e" +
    "\104\uff9e\106\uff9e\107\uff9e\110\uff9e\111\uff9e\112\uff9e\113" +
    "\uff9e\001\002\000\042\037\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\050\uffa3\052\uffa3\103\uffa3\104\uffa3\106" +
    "\uffa3\107\uffa3\110\uffa3\111\uffa3\112\uffa3\113\uffa3\001\002" +
    "\000\042\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\050\uffa5\052\uffa5\103\uffa5\104\uffa5\106\uffa5\107\uffa5" +
    "\110\uffa5\111\uffa5\112\uffa5\113\uffa5\001\002\000\042\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\050\uffa6" +
    "\052\uffa6\103\uffa6\104\uffa6\106\uffa6\107\uffa6\110\uffa6\111" +
    "\uffa6\112\uffa6\113\uffa6\001\002\000\012\051\uff96\053\uff96" +
    "\055\uff96\056\uff96\001\002\000\044\015\213\016\uff94\024" +
    "\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94" +
    "\033\uff94\034\uff94\035\uff94\036\uff94\051\uff94\053\uff94\055" +
    "\uff94\056\uff94\001\002\000\072\003\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\046\uffde\047\uffde\050" +
    "\uffde\052\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde" +
    "\076\uffde\077\uffde\101\uffde\102\uffde\103\uffde\104\uffde\106" +
    "\uffde\107\uffde\110\uffde\111\uffde\112\uffde\113\uffde\001\002" +
    "\000\066\003\070\037\032\040\043\041\117\042\056\043" +
    "\045\044\057\046\103\050\112\052\031\071\065\072\104" +
    "\073\075\074\061\076\077\077\044\101\107\102\037\103" +
    "\071\104\073\106\146\107\036\110\110\111\050\112\113" +
    "\113\064\001\002\000\004\101\uffcf\001\002\000\004\101" +
    "\357\001\002\000\004\050\360\001\002\000\042\037\032" +
    "\040\043\041\117\042\056\043\045\044\057\050\112\052" +
    "\031\103\071\104\073\106\146\107\036\110\110\111\050" +
    "\112\113\113\064\001\002\000\004\051\362\001\002\000" +
    "\004\055\363\001\002\000\072\003\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\052\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd" +
    "\076\uffdd\077\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd\106" +
    "\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd\113\uffdd\001\002" +
    "\000\012\002\uffe9\047\uffe9\062\uffe9\063\uffe9\001\002\000" +
    "\106\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a" +
    "\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020" +
    "\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a" +
    "\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035" +
    "\uff7a\036\uff7a\043\uff7a\044\uff7a\045\uff7a\051\uff7a\053\uff7a" +
    "\055\uff7a\056\uff7a\001\002\000\006\053\367\056\243\001" +
    "\002\000\116\004\uff5c\005\uff5c\006\uff5c\007\uff5c\010\uff5c" +
    "\011\uff5c\012\uff5c\013\uff5c\014\uff5c\015\uff5c\016\uff5c\017" +
    "\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c" +
    "\026\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034" +
    "\uff5c\035\uff5c\036\uff5c\037\uff5c\040\uff5c\043\uff5c\044\uff5c" +
    "\045\uff5c\051\uff5c\052\uff5c\053\uff5c\055\uff5c\056\uff5c\057" +
    "\uff5c\001\002\000\006\050\uffef\060\uffef\001\002\000\006" +
    "\050\ufff4\060\372\001\002\000\004\106\u0109\001\002\000" +
    "\004\050\374\001\002\000\006\051\ufff2\106\375\001\002" +
    "\000\004\054\u0106\001\002\000\006\051\ufff1\056\u0104\001" +
    "\002\000\004\051\u0101\001\002\000\006\051\uffee\056\uffee" +
    "\001\002\000\004\054\u0102\001\002\000\006\064\125\106" +
    "\130\001\002\000\004\046\ufff0\001\002\000\004\106\375" +
    "\001\002\000\006\051\uffed\056\uffed\001\002\000\006\064" +
    "\125\106\130\001\002\000\006\051\uffec\056\uffec\001\002" +
    "\000\006\056\u010c\061\uffc1\001\002\000\006\056\uffbf\061" +
    "\uffbf\001\002\000\004\061\u010b\001\002\000\004\050\ufff3" +
    "\001\002\000\004\106\u010d\001\002\000\006\056\uffbe\061" +
    "\uffbe\001\002\000\004\055\uffba\001\002\000\004\055\u0110" +
    "\001\002\000\020\002\uffb9\003\uffb9\062\uffb9\063\uffb9\070" +
    "\uffb9\105\uffb9\106\uffb9\001\002\000\020\002\uffb7\003\uffb7" +
    "\062\uffb7\063\uffb7\070\uffb7\105\uffb7\106\uffb7\001\002\000" +
    "\004\024\uffad\001\002\000\004\024\u0114\001\002\000\006" +
    "\066\u0115\067\u0116\001\002\000\006\046\uffb0\060\u0123\001" +
    "\002\000\006\046\uffae\060\u0118\001\002\000\004\046\u011d" +
    "\001\002\000\004\106\u0109\001\002\000\004\061\u011c\001" +
    "\002\000\006\056\u010c\061\uffc0\001\002\000\004\061\uffac" +
    "\001\002\000\004\046\uffaf\001\002\000\006\047\uffb5\106" +
    "\uffb5\001\002\000\006\047\uffaa\106\017\001\002\000\004" +
    "\047\u0120\001\002\000\004\055\u0121\001\002\000\020\002" +
    "\uffb2\003\uffb2\062\uffb2\063\uffb2\070\uffb2\105\uffb2\106\uffb2" +
    "\001\002\000\004\046\u0126\001\002\000\004\106\u0109\001" +
    "\002\000\004\061\u0125\001\002\000\004\046\uffb1\001\002" +
    "\000\012\047\uffb5\062\uffb5\063\uffb5\106\uffb5\001\002\000" +
    "\012\047\ufffa\062\011\063\021\106\017\001\002\000\004" +
    "\047\u0129\001\002\000\004\055\u012a\001\002\000\020\002" +
    "\uffb3\003\uffb3\062\uffb3\063\uffb3\070\uffb3\105\uffb3\106\uffb3" +
    "\001\002\000\010\047\ufff9\062\011\063\021\001\002\000" +
    "\004\047\uffab\001\002\000\012\002\ufffd\047\ufffd\062\ufffd" +
    "\063\ufffd\001\002\000\006\050\ufff4\060\372\001\002\000" +
    "\006\050\ufff5\060\ufff5\001\002\000\004\050\u0131\001\002" +
    "\000\006\051\ufff2\106\375\001\002\000\004\051\u0133\001" +
    "\002\000\004\046\ufff6\001\002\000\012\002\ufff7\047\ufff7" +
    "\062\ufff7\063\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\024\004\013\007\022\010\007\011\023\013\011" +
    "\014\005\015\021\016\006\025\015\001\001\000\002\001" +
    "\001\000\004\050\u0133\001\001\000\014\011\u012c\013\011" +
    "\014\005\015\021\016\006\001\001\000\004\017\u012d\001" +
    "\001\000\002\001\001\000\004\030\u0112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\370\001\001\000\004" +
    "\050\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\026\001\001\000\106\006\114" +
    "\007\052\043\033\044\062\045\032\046\027\047\040\055" +
    "\057\056\104\057\045\060\037\061\113\062\050\063\120" +
    "\064\117\065\054\067\061\070\073\071\077\072\051\073" +
    "\041\074\110\075\065\076\075\077\034\100\115\101\071" +
    "\102\053\103\121\104\046\105\066\106\100\107\105\110" +
    "\101\001\001\000\002\001\001\000\050\066\365\067\240" +
    "\070\073\071\077\072\051\073\041\074\110\075\065\076" +
    "\075\077\034\100\115\101\071\102\053\103\121\104\046" +
    "\105\066\106\100\107\105\110\101\001\001\000\016\070" +
    "\073\071\077\105\364\106\100\107\105\110\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\111\343\001\001\000\016\070" +
    "\073\071\077\105\332\106\100\107\105\110\101\001\001" +
    "\000\002\001\001\000\016\070\073\071\077\105\322\106" +
    "\100\107\105\110\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\315" +
    "\001\001\000\016\070\073\071\077\105\314\106\100\107" +
    "\105\110\101\001\001\000\016\070\073\071\077\105\313" +
    "\106\100\107\105\110\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\102\043\302\044\062" +
    "\045\032\046\027\047\040\055\057\056\104\057\045\060" +
    "\037\061\113\062\050\063\120\064\117\065\054\067\061" +
    "\070\073\071\077\072\051\073\041\074\110\075\065\076" +
    "\075\077\034\100\115\101\071\102\053\103\121\104\046" +
    "\105\066\106\100\107\105\110\101\001\001\000\002\001" +
    "\001\000\046\067\301\070\073\071\077\072\051\073\041" +
    "\074\110\075\065\076\075\077\034\100\115\101\071\102" +
    "\053\103\121\104\046\105\066\106\100\107\105\110\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\040\264\041\125\042\130\001\001\000\004" +
    "\112\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\067\210\070\073\071\077\072\051\073\041" +
    "\074\110\075\065\076\075\077\034\100\115\101\071\102" +
    "\053\103\121\104\046\105\066\106\100\107\105\110\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\070\073\071\077\105\171" +
    "\106\100\107\105\110\101\001\001\000\004\053\164\001" +
    "\001\000\004\053\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\040\126\041\125\042\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\037\132\040\133\041" +
    "\125\042\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\040\136\041\125\042\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\040\141" +
    "\041\125\042\130\001\001\000\002\001\001\000\020\070" +
    "\073\071\077\104\156\105\066\106\100\107\105\110\101" +
    "\001\001\000\020\070\073\071\077\104\155\105\066\106" +
    "\100\107\105\110\101\001\001\000\020\070\073\071\077" +
    "\104\146\105\066\106\100\107\105\110\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\070\073\071\077" +
    "\105\154\106\100\107\105\110\101\001\001\000\016\070" +
    "\073\071\077\105\153\106\100\107\105\110\101\001\001" +
    "\000\016\070\073\071\077\105\152\106\100\107\105\110" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\045" +
    "\161\046\160\047\040\055\057\056\104\057\045\060\037" +
    "\061\113\062\050\063\120\064\117\065\054\067\061\070" +
    "\073\071\077\072\051\073\041\074\110\075\065\076\075" +
    "\077\034\100\115\101\071\102\053\103\121\104\046\105" +
    "\066\106\100\107\105\110\101\001\001\000\004\054\163" +
    "\001\001\000\004\054\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\045\166\046\165\047\040\055\057" +
    "\056\104\057\045\060\037\061\113\062\050\063\120\064" +
    "\117\065\054\067\061\070\073\071\077\072\051\073\041" +
    "\074\110\075\065\076\075\077\034\100\115\101\071\102" +
    "\053\103\121\104\046\105\066\106\100\107\105\110\101" +
    "\001\001\000\004\054\170\001\001\000\004\054\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\070\073\071\077\101\207\102\053\103\121\104" +
    "\046\105\066\106\100\107\105\110\101\001\001\000\026" +
    "\070\073\071\077\101\174\102\053\103\121\104\046\105" +
    "\066\106\100\107\105\110\101\001\001\000\004\112\176" +
    "\001\001\000\002\001\001\000\024\070\073\071\077\102" +
    "\202\103\121\104\046\105\066\106\100\107\105\110\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\070\073\071\077\103\206" +
    "\104\046\105\066\106\100\107\105\110\101\001\001\000" +
    "\022\070\073\071\077\103\205\104\046\105\066\106\100" +
    "\107\105\110\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\112\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\070\073\071\077\075\213\076\075\077" +
    "\034\100\115\101\071\102\053\103\121\104\046\105\066" +
    "\106\100\107\105\110\101\001\001\000\002\001\001\000" +
    "\034\070\073\071\077\076\215\077\034\100\115\101\071" +
    "\102\053\103\121\104\046\105\066\106\100\107\105\110" +
    "\101\001\001\000\002\001\001\000\032\070\073\071\077" +
    "\077\217\100\115\101\071\102\053\103\121\104\046\105" +
    "\066\106\100\107\105\110\101\001\001\000\002\001\001" +
    "\000\030\070\073\071\077\100\221\101\071\102\053\103" +
    "\121\104\046\105\066\106\100\107\105\110\101\001\001" +
    "\000\002\001\001\000\046\067\223\070\073\071\077\072" +
    "\051\073\041\074\110\075\065\076\075\077\034\100\115" +
    "\101\071\102\053\103\121\104\046\105\066\106\100\107" +
    "\105\110\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\226\001\001\000\106\006\114\007\052\043" +
    "\227\044\062\045\032\046\027\047\040\055\057\056\104" +
    "\057\045\060\037\061\113\062\050\063\120\064\117\065" +
    "\054\067\061\070\073\071\077\072\051\073\041\074\110" +
    "\075\065\076\075\077\034\100\115\101\071\102\053\103" +
    "\121\104\046\105\066\106\100\107\105\110\101\001\001" +
    "\000\004\052\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\066\246\067\240\070\073\071\077\072\051" +
    "\073\041\074\110\075\065\076\075\077\034\100\115\101" +
    "\071\102\053\103\121\104\046\105\066\106\100\107\105" +
    "\110\101\001\001\000\012\037\234\040\133\041\125\042" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\066\241\067\240\070\073\071\077\072\051\073\041\074" +
    "\110\075\065\076\075\077\034\100\115\101\071\102\053" +
    "\103\121\104\046\105\066\106\100\107\105\110\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\067\244\070\073\071\077\072\051\073\041\074" +
    "\110\075\065\076\075\077\034\100\115\101\071\102\053" +
    "\103\121\104\046\105\066\106\100\107\105\110\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\067\254\070\073" +
    "\071\077\072\051\073\041\074\110\075\065\076\075\077" +
    "\034\100\115\101\071\102\053\103\121\104\046\105\066" +
    "\106\100\107\105\110\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\067\262\070\073\071\077\072\051\073" +
    "\041\074\110\075\065\076\075\077\034\100\115\101\071" +
    "\102\053\103\121\104\046\105\066\106\100\107\105\110" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\037" +
    "\270\040\133\041\125\042\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\067\276\070\073\071\077\072\051" +
    "\073\041\074\110\075\065\076\075\077\034\100\115\101" +
    "\071\102\053\103\121\104\046\105\066\106\100\107\105" +
    "\110\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\067\304\070\073\071\077\072\051\073\041\074\110\075" +
    "\065\076\075\077\034\100\115\101\071\102\053\103\121" +
    "\104\046\105\066\106\100\107\105\110\101\001\001\000" +
    "\002\001\001\000\100\044\307\045\032\046\306\047\040" +
    "\055\057\056\104\057\045\060\037\061\113\062\050\063" +
    "\120\064\117\065\054\067\061\070\073\071\077\072\051" +
    "\073\041\074\110\075\065\076\075\077\034\100\115\101" +
    "\071\102\053\103\121\104\046\105\066\106\100\107\105" +
    "\110\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\045\312\046\311\047\040\055\057\056\104\057\045" +
    "\060\037\061\113\062\050\063\120\064\117\065\054\067" +
    "\061\070\073\071\077\072\051\073\041\074\110\075\065" +
    "\076\075\077\034\100\115\101\071\102\053\103\121\104" +
    "\046\105\066\106\100\107\105\110\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\045\317\046\316\047\040\055\057\056\104" +
    "\057\045\060\037\061\113\062\050\063\120\064\117\065" +
    "\054\067\061\070\073\071\077\072\051\073\041\074\110" +
    "\075\065\076\075\077\034\100\115\101\071\102\053\103" +
    "\121\104\046\105\066\106\100\107\105\110\101\001\001" +
    "\000\004\054\321\001\001\000\004\054\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\067\324\070\073\071\077\072\051\073\041\074\110\075" +
    "\065\076\075\077\034\100\115\101\071\102\053\103\121" +
    "\104\046\105\066\106\100\107\105\110\101\001\001\000" +
    "\002\001\001\000\046\067\326\070\073\071\077\072\051" +
    "\073\041\074\110\075\065\076\075\077\034\100\115\101" +
    "\071\102\053\103\121\104\046\105\066\106\100\107\105" +
    "\110\101\001\001\000\002\001\001\000\046\067\330\070" +
    "\073\071\077\072\051\073\041\074\110\075\065\076\075" +
    "\077\034\100\115\101\071\102\053\103\121\104\046\105" +
    "\066\106\100\107\105\110\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\070\073\071\077" +
    "\074\351\075\065\076\075\077\034\100\115\101\071\102" +
    "\053\103\121\104\046\105\066\106\100\107\105\110\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\070\073\071\077\072\350" +
    "\073\041\074\110\075\065\076\075\077\034\100\115\101" +
    "\071\102\053\103\121\104\046\105\066\106\100\107\105" +
    "\110\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\100\044\354\045\032\046" +
    "\027\047\040\055\057\056\104\057\045\060\037\061\113" +
    "\062\050\063\120\064\117\065\054\067\061\070\073\071" +
    "\077\072\051\073\041\074\110\075\065\076\075\077\034" +
    "\100\115\101\071\102\053\103\121\104\046\105\066\106" +
    "\100\107\105\110\101\001\001\000\004\054\355\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\067\360\070" +
    "\073\071\077\072\051\073\041\074\110\075\065\076\075" +
    "\077\034\100\115\101\071\102\053\103\121\104\046\105" +
    "\066\106\100\107\105\110\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\372\001\001\000\006\035\u0109\036" +
    "\u0107\001\001\000\002\001\001\000\010\022\376\023\375" +
    "\024\377\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\040\u0102\041\125\042\130\001\001\000\002\001\001\000" +
    "\004\024\u0104\001\001\000\002\001\001\000\010\040\u0106" +
    "\041\125\042\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\113\u010e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u0121\001\001\000\004\027\u0116\001\001\000\002" +
    "\001\001\000\010\031\u0118\034\u011a\036\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\u011d\033\u011e\001\001\000\006\006" +
    "\114\007\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\u0123\034" +
    "\u011a\036\u0119\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\u0126\032\u0127\001\001\000\024\006\114\007" +
    "\052\010\u012a\011\023\012\u012b\013\011\014\005\015\021" +
    "\016\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\u012c\013\011\014\005\015\021" +
    "\016\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u012f\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\u0131\023\375\024\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Compilation compilation;

  @Override 
  public void syntax_error(Symbol cur_token)
  {
    compilation.syntaxError(this, cur_token);
  }
  
  @Override
  public void report_error(String message, Object info)
  {    
  	compilation.reportSyntaxError(this, message, info); 
  }

  @Override
  public void unrecovered_syntax_error(Symbol cur_token)
  {
    compilation.syntaxAnalysisFatalFailure = true;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompilerParser$actions {


    Environment getEnvironment() {
        return parser.compilation.environment;
    }

  private final CompilerParser parser;

  /** Constructor */
  CUP$CompilerParser$actions(CompilerParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompilerParser$do_action(
    int                        CUP$CompilerParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerParser$parser,
    java.util.Stack            CUP$CompilerParser$stack,
    int                        CUP$CompilerParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // new_list ::= NEW type LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = new ArrayConstructorExpression(t, i, tleft, tright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("new_list",55, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // new_list ::= LBRACKET expressions RBRACKET 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expressions ex = (Expressions)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = ArrayConstructorExpression.infer(ex, exleft, exright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("new_list",55, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // constant ::= new_list 
            {
              Expression RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression data = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = data; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("constant",54, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // constant ::= NULL 
            {
              Expression RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Object data = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new NullExpression(dataleft, dataright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("constant",54, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // constant ::= BOOLEAN 
            {
              Expression RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Boolean data = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("constant",54, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // constant ::= CHARACTER 
            {
              Expression RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Character data = (Character)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("constant",54, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // constant ::= STRING 
            {
              Expression RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String data = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("constant",54, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // constant ::= FLOAT 
            {
              Expression RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Float data = (Float)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("constant",54, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // constant ::= INTEGER 
            {
              Expression RESULT =null;
		int dataleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Integer data = (Integer)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("constant",54, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expr0_simple ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new VariableExpression(id, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr0_simple",69, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expr0_simple ::= NEW IDENTIFIER LEFTTYPEBRACKET type_arguments RIGHTTYPEBRACKET LPAR RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int targleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int targright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		ArrayList<Type> targ = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		 RESULT = new ConstructorExpression(id, targ, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr0_simple",69, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expr0_simple ::= NEW IDENTIFIER LPAR RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		 RESULT = new ConstructorExpression(id, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr0_simple",69, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expr0_simple ::= constant 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr0_simple",69, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expr0_simple ::= LPAR expression RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr0_simple",69, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expr1_subroutinegroup ::= expr1_postfix PERIOD IDENTIFIER 
            {
              SubroutineGroup RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = SubroutineGroup.create(var, id, varleft, varright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_subroutinegroup",70, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr1_subroutinegroup ::= IDENTIFIER 
            {
              SubroutineGroup RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = SubroutineGroup.create(id, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_subroutinegroup",70, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expr1_postfix ::= expr0_simple 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",68, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expr1_postfix ::= expr1_postfix DECREMENT 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = UnaryExpression.create("--", UnaryExpressionSide.Postfix, left, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",68, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr1_postfix ::= expr1_postfix INCREMENT 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = UnaryExpression.create("++", UnaryExpressionSide.Postfix, left, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",68, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr1_postfix ::= expr1_postfix LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		Expression array = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = ArrayAccessExpression.create(array, index, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",68, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr1_postfix ::= expr1_postfix PERIOD IDENTIFIER 
            {
              Expression RESULT =null;
		int parentleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression parent = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = MemberVariableExpression.create(parent, name, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",68, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr1_postfix ::= expr1_subroutinegroup LEFTTYPEBRACKET type_arguments RIGHTTYPEBRACKET LPAR RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		SubroutineGroup id = (SubroutineGroup)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int targsleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int targsright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		ArrayList<Type> targs = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		 RESULT = CallExpression.create(id, targs, null, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",68, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr1_postfix ::= expr1_subroutinegroup LEFTTYPEBRACKET type_arguments RIGHTTYPEBRACKET LPAR expressions RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).right;
		SubroutineGroup id = (SubroutineGroup)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).value;
		int targsleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int targsright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		ArrayList<Type> targs = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = CallExpression.create(id, targs, args, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",68, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr1_postfix ::= expr1_subroutinegroup LPAR expressions RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		SubroutineGroup id = (SubroutineGroup)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = CallExpression.create(id, null, args, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",68, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr1_postfix ::= expr1_subroutinegroup LPAR RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		SubroutineGroup id = (SubroutineGroup)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		 RESULT = CallExpression.create(id, null, null, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr1_postfix",68, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr2_prefix ::= expr1_postfix 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",67, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr2_prefix ::= MINUS expr2_prefix 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = UnaryExpression.create("-", UnaryExpressionSide.Prefix, right, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",67, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr2_prefix ::= PLUS expr2_prefix 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = UnaryExpression.create("+", UnaryExpressionSide.Prefix, right, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",67, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr2_prefix ::= BITWISENEGATION expr2_prefix 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = UnaryExpression.create("~", UnaryExpressionSide.Prefix, right, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",67, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr2_prefix ::= LOGICALNEGATION expr2_prefix 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = UnaryExpression.create("!", UnaryExpressionSide.Prefix, right, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",67, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr2_prefix ::= DECREMENT expr2_prefix 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = UnaryExpression.create("--", UnaryExpressionSide.Prefix, right, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",67, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr2_prefix ::= INCREMENT expr2_prefix 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = UnaryExpression.create("++", UnaryExpressionSide.Prefix, right, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr2_prefix",67, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr3_multiplication ::= expr2_prefix 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr3_multiplication",66, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr3_multiplication ::= expr3_multiplication MODULO expr2_prefix 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "%", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr3_multiplication",66, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr3_multiplication ::= expr3_multiplication DIVIDE expr2_prefix 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "/", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr3_multiplication",66, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr3_multiplication ::= expr3_multiplication TIMES expr2_prefix 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "*", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr3_multiplication",66, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr4_addition ::= expr3_multiplication 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr4_addition",65, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr4_addition ::= expr4_addition CONCATENATE expr3_multiplication 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "@", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr4_addition",65, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr4_addition ::= expr4_addition PLUS expr3_multiplication 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "+", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr4_addition",65, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr4_addition ::= expr4_addition MINUS expr3_multiplication 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "-", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr4_addition",65, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr5_shift ::= expr4_addition 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr5_shift",64, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr5_shift ::= expr5_shift SHIFTRIGHT expr4_addition 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, ">>", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr5_shift",64, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr5_shift ::= expr5_shift SHIFTLEFT expr4_addition 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "<<", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr5_shift",64, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr6_comparison ::= expr5_shift 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr6_comparison",63, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr6_comparison ::= expr6_comparison relational_operator expr5_shift 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, op, e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr6_comparison",63, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr7_equality ::= expr6_comparison 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr7_equality",62, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr7_equality ::= expr7_equality UNEQUAL expr6_comparison 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "!=", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr7_equality",62, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr7_equality ::= expr7_equality EQUALEQUAL expr6_comparison 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "==", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr7_equality",62, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr8_bitwise_and ::= expr7_equality 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr8_bitwise_and",61, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr8_bitwise_and ::= expr8_bitwise_and BITWISEAND expr7_equality 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "&", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr8_bitwise_and",61, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr9_xor ::= expr8_bitwise_and 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr9_xor",60, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr9_xor ::= expr9_xor XOR expr8_bitwise_and 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "^", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr9_xor",60, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr10_bitwise_or ::= expr9_xor 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr10_bitwise_or",59, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr10_bitwise_or ::= expr10_bitwise_or BITWISEOR expr9_xor 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "|", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr10_bitwise_or",59, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr11_and ::= expr10_bitwise_or 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr11_and",58, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr11_and ::= expr11_and LOGICALAND expr10_bitwise_or 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "&&", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr11_and",58, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr12_or ::= expr11_and 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr12_or",57, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr12_or ::= expr12_or LOGICALOR expr11_and 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(e1, "||", e2, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr12_or",57, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr13_assignment ::= expr12_or 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr13_assignment",56, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr13_assignment ::= expr12_or assignment_operator expr13_assignment 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = BinaryExpression.create(left, op, right, opleft, opright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expr13_assignment",56, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= expr13_assignment 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expression",53, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // relational_operator ::= GREATEROREQUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("relational_operator",72, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // relational_operator ::= LESSOREQUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("relational_operator",72, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // relational_operator ::= GREATERTHAN 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("relational_operator",72, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // relational_operator ::= LESSTHAN 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("relational_operator",72, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // assignment_operator ::= EQUAL 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",71, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // assignment_operator ::= UNARYBITWISEOR 
            {
              String RESULT =null;
		 RESULT = "|="; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",71, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // assignment_operator ::= UNARYXOR 
            {
              String RESULT =null;
		 RESULT = "^="; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",71, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // assignment_operator ::= UNARYBITWISEAND 
            {
              String RESULT =null;
		 RESULT = "&="; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",71, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // assignment_operator ::= UNARYSHIFTRIGHT 
            {
              String RESULT =null;
		 RESULT = ">>="; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",71, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // assignment_operator ::= UNARYSHIFTLEFT 
            {
              String RESULT =null;
		 RESULT = "<<="; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",71, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // assignment_operator ::= UNARYMODULO 
            {
              String RESULT =null;
		 RESULT = "%="; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",71, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assignment_operator ::= UNARYDIVIDE 
            {
              String RESULT =null;
		 RESULT = "/="; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",71, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assignment_operator ::= UNARYTIMES 
            {
              String RESULT =null;
		 RESULT = "*="; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",71, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assignment_operator ::= UNARYMINUS 
            {
              String RESULT =null;
		 RESULT = "-="; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",71, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // assignment_operator ::= UNARYPLUS 
            {
              String RESULT =null;
		 RESULT = "+="; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("assignment_operator",71, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expressions ::= expressions COMMA expression 
            {
              Expressions RESULT =null;
		int exsleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int exsright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expressions exs = (Expressions)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 exs.add(ex); RESULT = exs; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expressions",52, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expressions ::= expression 
            {
              Expressions RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new Expressions(); RESULT.add(ex); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("expressions",52, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // variable_declaration ::= IDENTIFIER COLON type SEMICOLON 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 Variable v = Variable.createAndAddToEnvironment(id, tp, idleft, idright, parser.compilation); RESULT = v; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("variable_declaration",5, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // structure_type_contents ::= local_declarations 
            {
              Object RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Declarations ld = (Declarations)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                            TypeDefinitionProcess.currentType.setDeclarations ( ld );
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("structure_type_contents",25, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // class_type_contents ::= local_declarations optional_subroutines 
            {
              Object RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Declarations ld = (Declarations)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int sbrtleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sbrtright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Subroutines sbrt = (Subroutines)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                            TypeDefinitionProcess.currentType.setDeclarations ( ld );
                            TypeDefinitionProcess.currentType.setSubroutines ( sbrt );
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("class_type_contents",24, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // class_type_parameters ::= type_parameters 
            {
              ArrayList<TypeParameter> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		ArrayList<TypeParameter> tp = (ArrayList<TypeParameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = tp; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("class_type_parameters",23, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // store_statically_type_name ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 TypeDefinitionProcess.beginTypeDefinition(id, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("store_statically_type_name",22, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // structure_header ::= 
            {
              Object RESULT =null;
		 TypeDefinitionProcess.setTypeParameters(null); TypeDefinitionProcess.createClass(parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("structure_header",21, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // structure_header ::= LEFTTYPEBRACKET class_type_parameters RIGHTTYPEBRACKET 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		ArrayList<TypeParameter> tp = (ArrayList<TypeParameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 TypeDefinitionProcess.setTypeParameters(tp); TypeDefinitionProcess.createClass(parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("structure_header",21, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // class_header ::= 
            {
              Object RESULT =null;
		 TypeDefinitionProcess.setTypeParameters(null); TypeDefinitionProcess.createClass(parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("class_header",20, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // class_header ::= LEFTTYPEBRACKET class_type_parameters RIGHTTYPEBRACKET 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		ArrayList<TypeParameter> tp = (ArrayList<TypeParameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 TypeDefinitionProcess.setTypeParameters(tp); TypeDefinitionProcess.createClass(parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("class_header",20, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // type_declaration ::= TYPE store_statically_type_name EQUAL STRUCTURE structure_header LBRACE structure_type_contents RBRACE SEMICOLON 
            {
              TypeOrTypeTemplate RESULT =null;
		 RESULT = TypeDefinitionProcess.endTypeDefinition(parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_declaration",19, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // type_declaration ::= TYPE store_statically_type_name EQUAL CLASS class_header LBRACE class_type_contents RBRACE SEMICOLON 
            {
              TypeOrTypeTemplate RESULT =null;
		 RESULT = TypeDefinitionProcess.endTypeDefinition(parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_declaration",19, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // local_declaration ::= variable_declaration 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = v; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("local_declaration",4, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // local_declarations ::= 
            {
              Declarations RESULT =null;
		 RESULT = new Declarations(); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("local_declarations",3, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // local_declarations ::= local_declarations local_declaration 
            {
              Declarations RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Declarations decs = (Declarations)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Variable l = (Variable)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 decs.add(l); RESULT = decs; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("local_declarations",3, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // global_declaration ::= error SEMICOLON 
            {
              Declaration RESULT =null;
		
		parser.compilation.addSuffix(" Malformed declaration. Analysis continues at next semicolon.");
	
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("global_declaration",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // global_declaration ::= variable_declaration 
            {
              Declaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = v; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("global_declaration",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // global_declaration ::= DEBUG_SPAWN_STRUCTURE IDENTIFIER NT$0 SEMICOLON 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;

              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("global_declaration",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$0 ::= 
            {
              Declaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
 Type theStructure = Type.createDebugStructure(id); getEnvironment().addType(theStructure); RESULT = theStructure; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("NT$0",73, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // global_declaration ::= type_declaration 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		TypeOrTypeTemplate t = (TypeOrTypeTemplate)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("global_declaration",2, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // global_declarations ::= 
            {
              Declarations RESULT =null;
		 RESULT = new Declarations(); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("global_declarations",1, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // global_declarations ::= global_declarations global_declaration 
            {
              Declarations RESULT =null;
		int gdsleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int gdsright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Declarations gds = (Declarations)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int gdleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int gdright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Declaration gd = (Declaration)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 if (gd != null) { gds.add(gd); } RESULT = gds; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("global_declarations",1, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type_parameters_inner ::= type_parameters_inner COMMA IDENTIFIER 
            {
              ArrayList<TypeParameter> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		ArrayList<TypeParameter> tp = (ArrayList<TypeParameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 tp.add(new TypeParameter(id, idleft, idright)); RESULT = tp; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_parameters_inner",28, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type_parameters_inner ::= IDENTIFIER 
            {
              ArrayList<TypeParameter> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(new TypeParameter(id, idleft, idright)); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_parameters_inner",28, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type_parameters ::= type_parameters_inner 
            {
              ArrayList<TypeParameter> RESULT =null;
		int tpileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tpiright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		ArrayList<TypeParameter> tpi = (ArrayList<TypeParameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = tpi; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_parameters",26, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // subroutine_type_parameters ::= type_parameters_inner 
            {
              ArrayList<TypeParameter> RESULT =null;
		int tpileft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tpiright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		ArrayList<TypeParameter> tpi = (ArrayList<TypeParameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 Subroutine.enterTypeParameters(tpi, parser.compilation); RESULT = tpi; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("subroutine_type_parameters",27, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type_arguments ::= type_arguments COMMA type 
            {
              ArrayList<Type> RESULT =null;
		int tasleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int tasright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		ArrayList<Type> tas = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 tas.add(tp); RESULT = tas; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_arguments",29, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type_arguments ::= type 
            {
              ArrayList<Type> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(tp); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_arguments",29, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type_instantiation ::= IDENTIFIER LEFTTYPEBRACKET type_arguments RIGHTTYPEBRACKET 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int targleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int targright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		ArrayList<Type> targ = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 Type t = Type.instantiateTemplate(id, targ, idleft, idright, parser.compilation); RESULT = t; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type_instantiation",32, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // list_type ::= LIST OF type 
            {
              Type RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int innerleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int innerright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Type inner = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 Type t = Type.createArray(inner, lleft, lright); RESULT = t; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("list_type",31, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= type_instantiation 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= list_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Type.findType(id, idleft, idright, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("type",30, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for_head ::= FOR LPAR expression SEMICOLON expression SEMICOLON expression RPAR 
            {
              CycleStatement RESULT =null;
		int oneleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int oneright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		Expression one = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int twoleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int tworight = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		Expression two = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int threeleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int threeright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expression three = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = new ForStatement(one, two, three, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("for_head",51, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // while_head ::= WHILE LPAR expression RPAR 
            {
              CycleStatement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = new WhileStatement(ex, null, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("while_head",50, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // foreach_head ::= FOREACH LPAR IDENTIFIER IN expression RPAR 
            {
              CycleStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = new CycleStatement(); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("foreach_head",49, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // loop_open ::= for_head enter_cycle open_statement leave_cycle 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		CycleStatement c = (CycleStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 c.body = s; RESULT = c; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("loop_open",45, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // loop_open ::= while_head enter_cycle open_statement leave_cycle 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		CycleStatement c = (CycleStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 c.body = s; RESULT = c; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("loop_open",45, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // loop_open ::= foreach_head enter_cycle open_statement leave_cycle 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		CycleStatement c = (CycleStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 c.body = s; RESULT = c; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("loop_open",45, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // leave_cycle ::= 
            {
              Object RESULT =null;
		 getEnvironment().leaveCycle(); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("leave_cycle",42, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // enter_cycle ::= 
            {
              Object RESULT =null;
		 getEnvironment().enterCycle(); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("enter_cycle",41, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // loop_closed ::= for_head enter_cycle closed_statement leave_cycle 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		CycleStatement c = (CycleStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 c.body = s; RESULT = c; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("loop_closed",48, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // loop_closed ::= while_head enter_cycle closed_statement leave_cycle 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		CycleStatement c = (CycleStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 c.body = s; RESULT = c; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("loop_closed",48, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // loop_closed ::= foreach_head enter_cycle closed_statement leave_cycle 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		CycleStatement c = (CycleStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 c.body = s; RESULT = c; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("loop_closed",48, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // if_long_closed_closed ::= IF LPAR expression RPAR closed_statement ELSE closed_statement 
            {
              IfStatement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int stelseleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int stelseright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statement stelse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                            RESULT = new IfStatement(ex, st, stelse, parser.compilation);
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("if_long_closed_closed",47, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_statement ::= BREAK 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
 						    RESULT = new BreakStatement(sleft, sright, parser.compilation);
 						 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("simple_statement",46, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple_statement ::= STOP 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
 						    RESULT = new StopStatement(sleft, sright, parser.compilation);
 						 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("simple_statement",46, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_statement ::= RETURN expression 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
						    RESULT = new ReturnStatement(rleft, rright, ex, parser.compilation);
						 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("simple_statement",46, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_statement ::= expression 
            {
              Statement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                            RESULT = new ExpressionStatement(ex, parser.compilation);
                         
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("simple_statement",46, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // closed_statement ::= error SEMICOLON 
            {
              Statement RESULT =null;
		 parser.compilation.addSuffix(" Analysis continues at next semicolon."); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("closed_statement",36, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // closed_statement ::= loop_closed 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("closed_statement",36, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // closed_statement ::= if_long_closed_closed 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		IfStatement s = (IfStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("closed_statement",36, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // closed_statement ::= block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		BlockStatement b = (BlockStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = b; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("closed_statement",36, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // closed_statement ::= REPEAT enter_cycle statement leave_cycle WHILE LPAR expression RPAR SEMICOLON 
            {
              Statement RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		 RESULT = new RepeatStatement(ex, st, parser.compilation); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("closed_statement",36, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // closed_statement ::= simple_statement SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = s; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("closed_statement",36, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if_long_closed_open ::= IF LPAR expression RPAR closed_statement ELSE open_statement 
            {
              IfStatement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statement st2 = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                            RESULT = new IfStatement(ex, st, st2, parser.compilation);
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("if_long_closed_open",44, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if_short ::= IF LPAR expression RPAR statement 
            {
              IfStatement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                            RESULT = new IfStatement(ex, st, null, parser.compilation);
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("if_short",43, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // open_statement ::= loop_open 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("open_statement",35, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // open_statement ::= if_long_closed_open 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		IfStatement s = (IfStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("open_statement",35, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // open_statement ::= if_short 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		IfStatement s = (IfStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("open_statement",35, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= closed_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("statement",34, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= open_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = s ; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("statement",34, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statements ::= 
            {
              Statements RESULT =null;
		
                            RESULT = new Statements();
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("statements",33, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statements ::= statement statements 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                            if (s != null)
                                ss.addStatement(s);
                            RESULT = ss;
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("statements",33, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // block ::= LBRACE open_scope local_declarations statements close_scope RBRACE 
            {
              BlockStatement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		Declarations d = (Declarations)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		
                            RESULT = new BlockStatement();
                            RESULT.declarations = d;
                            RESULT.statements = s;
                        
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("block",37, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unscoped_block ::= LBRACE local_declarations statements RBRACE 
            {
              BlockStatement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		Declarations d = (Declarations)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		
                                                    RESULT = new BlockStatement();
                                                    RESULT.declarations = d;
                                                    RESULT.statements = s;
                                                
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("unscoped_block",38, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // close_scope ::= 
            {
              Object RESULT =null;
		 getEnvironment().leaveScope(); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("close_scope",40, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // open_scope ::= 
            {
              Object RESULT =null;
		 getEnvironment().enterScope(); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("open_scope",39, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameter ::= IDENTIFIER COLON type 
            {
              Parameter RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                    RESULT = new Parameter(id, t, idleft, idright, parser.compilation);
                 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("parameter",18, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parameters ::= parameters COMMA parameter 
            {
              ArrayList<Parameter> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).right;
		ArrayList<Parameter> ps = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 ps.add(p); RESULT = ps; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("parameters",17, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parameters ::= parameter 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(p); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("parameters",17, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_name ::= IDENTIFIER 
            {
              Subroutine RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Subroutine.create(SubroutineKind.FUNCTION, name, null, null, null, parser.compilation, nameleft, nameright); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("function_name",14, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_header ::= FUNCTION function_name optional_subroutine_type_parameters LPAR optional_parameters RPAR COLON type 
            {
              Subroutine RESULT =null;
		int subroutineleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).left;
		int subroutineright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).right;
		Subroutine subroutine = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-6)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).right;
		ArrayList<TypeParameter> tp = (ArrayList<TypeParameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		ArrayList<Parameter> ps = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                         subroutine.setTypeParameters  (tp == null ? new ArrayList<TypeParameter>() : tp);
                         subroutine.parameters = (ps == null ? new ArrayList<Parameter>() : ps);
                         subroutine.returnType = t;
                         getEnvironment().returnType = t;
                         getEnvironment().addSubroutine(subroutine);
                         getEnvironment().enterFunction();
                         RESULT = subroutine;
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("function_header",12, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optional_parameters ::= parameters 
            {
              ArrayList<Parameter> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		ArrayList<Parameter> ps = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = ps; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("optional_parameters",16, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // optional_parameters ::= 
            {
              ArrayList<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("optional_parameters",16, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optional_subroutine_type_parameters ::= LEFTTYPEBRACKET subroutine_type_parameters RIGHTTYPEBRACKET 
            {
              ArrayList<TypeParameter> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		ArrayList<TypeParameter> ps = (ArrayList<TypeParameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		 RESULT = ps; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("optional_subroutine_type_parameters",15, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optional_subroutine_type_parameters ::= 
            {
              ArrayList<TypeParameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("optional_subroutine_type_parameters",15, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // procedure_name ::= IDENTIFIER 
            {
              Subroutine RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = Subroutine.create(SubroutineKind.PROCEDURE, name, null, null, null, parser.compilation, nameleft, nameright); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("procedure_name",13, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // procedure_header ::= PROCEDURE procedure_name optional_subroutine_type_parameters LPAR optional_parameters RPAR 
            {
              Subroutine RESULT =null;
		int subroutineleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).left;
		int subroutineright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).right;
		Subroutine subroutine = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).right;
		ArrayList<TypeParameter> tp = (ArrayList<TypeParameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-3)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		ArrayList<Parameter> ps = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		
                        subroutine.setTypeParameters  (tp == null ? new ArrayList<TypeParameter>() : tp);
                        subroutine.parameters = (ps == null ? new ArrayList<Parameter>() : ps);
                        subroutine.returnType = Type.voidType;
                        getEnvironment().returnType = subroutine.returnType;
                        getEnvironment().addSubroutine(subroutine);
                        getEnvironment().enterProcedure();
                        RESULT = subroutine;
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("procedure_header",11, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function ::= function_header unscoped_block 
            {
              Subroutine RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Subroutine h = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		BlockStatement b = (BlockStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                        getEnvironment().leaveSubroutine();
                        if (Subroutine.typeParametersEntered) {
                            Subroutine.leaveTypeParameters(parser.compilation);
                        }
                        h.block = b;
                        RESULT = h;
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("function",9, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // procedure ::= procedure_header unscoped_block 
            {
              Subroutine RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Subroutine p = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		BlockStatement b = (BlockStatement)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                        getEnvironment().leaveSubroutine();
                        if (Subroutine.typeParametersEntered) {
                            Subroutine.leaveTypeParameters(parser.compilation);
                        }
                        p.block = b;
                        RESULT = p;
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("procedure",10, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optional_subroutines ::= subroutines 
            {
              Subroutines RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Subroutines s = (Subroutines)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("optional_subroutines",8, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optional_subroutines ::= 
            {
              Subroutines RESULT =null;
		 RESULT = new Subroutines(); 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("optional_subroutines",8, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // subroutine ::= procedure 
            {
              Subroutine RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Subroutine p = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("subroutine",7, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // subroutine ::= function 
            {
              Subroutine RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Subroutine f = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		 RESULT = f; 
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("subroutine",7, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // subroutines ::= subroutines subroutine 
            {
              Subroutines RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Subroutines ss = (Subroutines)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Subroutine s = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                        ss.addSubroutine(s);
                        RESULT = ss;
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("subroutines",6, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // subroutines ::= subroutine 
            {
              Subroutines RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Subroutine s = (Subroutine)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
                        Subroutines subroutines = new Subroutines();
                        subroutines.addSubroutine(s);
                        RESULT = subroutines;
                    
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("subroutines",6, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= global_declarations 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Declarations d = (Declarations)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
					    // This is only useful for syntax tests, because it will always fail in semantic analysis
					    // due to not having a "main" procedure. But for syntax tests, it is useful.
					    parser.compilation.abstractSyntaxTree = new ProgramNode();
					    parser.compilation.abstractSyntaxTree.Declarations = d;
					    parser.compilation.completeAnalysis();
					
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= global_declarations subroutines 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Declarations d = (Declarations)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()).right;
		Subroutines s = (Subroutines)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.peek()).value;
		
					    ProgramNode program = new ProgramNode();
					    program.Declarations = d;
					    program.Subroutines = s;
					    parser.compilation.abstractSyntaxTree = program;
					    parser.compilation.completeAnalysis();
					
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          return CUP$CompilerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.elementAt(CUP$CompilerParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerParser$parser.done_parsing();
          return CUP$CompilerParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

