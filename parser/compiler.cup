package compiler.generated;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import compiler.*;
import compiler.nodes.*;
import compiler.nodes.statements.*;
import compiler.nodes.declarations.*;
import compiler.nodes.expressions.*;
import compiler.nodes.expressions.literals.*;

/* -------------------------------------------------
        Code (overriding CUP's parser's methods)
   ------------------------------------------------- */
parser code {:
  public Compilation compilation;

  @Override 
  public void syntax_error(Symbol cur_token)
  {
    compilation.syntaxError(this, cur_token);
  }
  
  @Override
  public void report_error(String message, Object info)
  {    
  	compilation.reportSyntaxError(this, message, info); 
  }

  @Override
  public void unrecovered_syntax_error(Symbol cur_token)
  {
    compilation.syntaxAnalysisFatalFailure = true;
  }
:};
action code {:
    Environment getEnvironment() {
        return parser.compilation.environment;
    }
:};

/* -------------------------------------------------
        Terminals without values
   ------------------------------------------------- */

terminal TIMES, DIVIDE, MODULO;
terminal LESSTHAN, LESSOREQUAL, GREATERTHAN, GREATEROREQUAL;
terminal EQUALEQUAL, UNEQUAL;
terminal LOGICALAND, LOGICALOR;
terminal BITWISEAND, BITWISEOR, XOR, SHIFTLEFT, SHIFTRIGHT;
terminal EQUAL;
terminal UNARYPLUS, UNARYMINUS, UNARYTIMES, UNARYDIVIDE, UNARYMODULO;
terminal UNARYSHIFTLEFT, UNARYSHIFTRIGHT, UNARYBITWISEAND, UNARYXOR,
	 UNARYBITWISEOR;
terminal INCREMENT, DECREMENT;
terminal LOGICALNEGATION, BITWISENEGATION;
terminal MINUS, PLUS;
terminal CONCATENATE;

terminal LBRACE, RBRACE, LPAR, RPAR, LBRACKET, RBRACKET;

terminal COLON, SEMICOLON, COMMA, PERIOD;

terminal LEFTTYPEBRACKET, RIGHTTYPEBRACKET;

terminal PROCEDURE, FUNCTION, LIST, OF, CLASS, STRUCTURE, TYPE, RETURN, STOP,
	 BREAK, IF, ELSE, FOREACH, FOR, IN, WHILE, REPEAT, NEW, NULL;
terminal DEBUG_SPAWN_STRUCTURE; /* For debug purposes only. */
	 
	 


/* -------------------------------------------------
        Terminals with values
   ------------------------------------------------- */
terminal String IDENTIFIER;
terminal Integer INTEGER;
terminal Float FLOAT;
terminal Character CHARACTER;
terminal String STRING;
terminal Boolean BOOLEAN;

/* -------------------------------------------------
        Non terminals 
   ------------------------------------------------- */
non terminal program;

non terminal Declarations global_declarations;
non terminal Declaration global_declaration;
non terminal Declarations local_declarations;
non terminal Variable local_declaration;
non terminal Variable variable_declaration;

non terminal Subroutines subroutines;
non terminal Subroutine subroutine;
non terminal Subroutine function;
non terminal Subroutine procedure;
non terminal Subroutine procedure_header;
non terminal Subroutine function_header;
non terminal Subroutine procedure_name;
non terminal Subroutine function_name;
non terminal ArrayList<TypeParameter> optional_subroutine_type_parameters;
non terminal ArrayList<Parameter> optional_parameters;
non terminal ArrayList<Parameter> parameters;
non terminal Parameter parameter;

non terminal TypeOrTypeTemplate type_declaration;
non terminal class_header;
non terminal structure_header;
non terminal store_statically_type_name;
non terminal ArrayList<TypeParameter> class_type_parameters;
non terminal class_type_contents;
non terminal structure_type_contents;

non terminal ArrayList<TypeParameter> type_parameters;
non terminal ArrayList<TypeParameter> subroutine_type_parameters;
non terminal ArrayList<TypeParameter> type_parameters_inner;
non terminal ArrayList<Type> type_arguments;

non terminal Type type;
non terminal Type list_type;
non terminal Type type_instantiation;

non terminal Statements statements;
non terminal Statement statement;
non terminal Statement open_statement;
non terminal Statement closed_statement;
non terminal BlockStatement block;
non terminal open_scope, close_scope, enter_cycle, leave_cycle;
non terminal IfStatement if_short;
non terminal IfStatement if_long_closed_open;
non terminal Statement loop_open;
non terminal Statement simple_statement;
non terminal IfStatement if_long_closed_closed;
non terminal Statement loop_closed;
non terminal CycleStatement foreach_head;
non terminal CycleStatement while_head;
non terminal CycleStatement for_head;

non terminal Expressions expressions;
non terminal Expression expression;
non terminal Expression constant;
non terminal Expression new_list;
non terminal Expression expr13_assignment, expr12_or, expr11_and, expr10_bitwise_or, expr9_xor, expr8_bitwise_and, expr7_equality, expr6_comparison, expr5_shift, expr4_addition, expr3_multiplication, expr2_prefix, expr1_postfix, expr0_simple;
non terminal SubroutineGroup expr1_subroutinegroup;
non terminal String assignment_operator, relational_operator;



/* -------------------------------------------------
        Productions
   ------------------------------------------------- */
   
start with program;



program		    ::= global_declarations:d subroutines:s
					{:
					    ProgramNode program = new ProgramNode();
					    program.Declarations = d;
					    program.Subroutines = s;
					    parser.compilation.abstractSyntaxTree = program;
					    parser.compilation.completeAnalysis();
					:}
					|
					global_declarations:d
					{:
					    // This is only useful for syntax tests, because it will always fail in semantic analysis
					    // due to not having a "main" procedure. But for syntax tests, it is useful.
					    parser.compilation.abstractSyntaxTree = new ProgramNode();
					    parser.compilation.abstractSyntaxTree.Declarations = d;
					    parser.compilation.completeAnalysis();
					:}
					;

/* -------------------------------------------------
        Subroutines
   ------------------------------------------------- */
subroutines     ::= subroutine:s
                    {:
                        Subroutines subroutines = new Subroutines();
                        subroutines.addSubroutine(s);
                        RESULT = subroutines;
                    :}
                    | subroutines:ss subroutine:s
                    {:
                        ss.addSubroutine(s);
                        RESULT = ss;
                    :}
                    ;
subroutine      ::= function:f
                    {: RESULT = f; :}
                     | procedure:p
                    {: RESULT = p; :}
                    ;
procedure       ::= procedure_header:p block:b {:
                        getEnvironment().leaveSubroutine();
                        if (Subroutine.typeParametersEntered) {
                            Subroutine.leaveTypeParameters(parser.compilation);
                        }
                        p.block = b;
                        RESULT = p;
                    :};
function        ::= function_header:h block:b {:
                        getEnvironment().leaveSubroutine();
                        if (Subroutine.typeParametersEntered) {
                            Subroutine.leaveTypeParameters(parser.compilation);
                        }
                        h.block = b;
                        RESULT = h;
                    :};
procedure_header ::= PROCEDURE procedure_name:subroutine optional_subroutine_type_parameters:tp LPAR optional_parameters:ps RPAR
                    {:
                        subroutine.setTypeParameters  (tp == null ? new ArrayList<TypeParameter>() : tp);
                        subroutine.parameters = (ps == null ? new ArrayList<Parameter>() : ps);
                        subroutine.returnType = Type.voidType;
                        getEnvironment().returnType = subroutine.returnType;
                        getEnvironment().addSubroutine(subroutine);
                        getEnvironment().enterProcedure();
                        RESULT = subroutine;
                    :}
                    ;
procedure_name ::= IDENTIFIER : name {: RESULT = Subroutine.create(SubroutineKind.PROCEDURE, name, null, null, null, parser.compilation, nameleft, nameright); :} ;
optional_subroutine_type_parameters ::=  {: RESULT = new ArrayList<>(); :}
                    | LEFTTYPEBRACKET subroutine_type_parameters:ps RIGHTTYPEBRACKET {: RESULT = ps; :}
                    ;
optional_parameters ::=  {: RESULT = new ArrayList<>(); :}
                    | parameters:ps {: RESULT = ps; :}
                    ;
function_header ::= FUNCTION function_name:subroutine optional_subroutine_type_parameters:tp LPAR optional_parameters:ps RPAR COLON type:t
                    {:
                         subroutine.setTypeParameters  (tp == null ? new ArrayList<TypeParameter>() : tp);
                         subroutine.parameters = (ps == null ? new ArrayList<Parameter>() : ps);
                         subroutine.returnType = t;
                         getEnvironment().returnType = t;
                         getEnvironment().addSubroutine(subroutine);
                         getEnvironment().enterFunction();
                         RESULT = subroutine;
                    :}
                    ;
function_name ::= IDENTIFIER:name {: RESULT = Subroutine.create(SubroutineKind.FUNCTION, name, null, null, null, parser.compilation, nameleft, nameright); :} ;
parameters 	::= parameter:p
                {: RESULT = new ArrayList<>(); RESULT.add(p); :}
                |
                parameters:ps COMMA parameter:p
                {: ps.add(p); RESULT = ps; :}
                ;

parameter  	::= IDENTIFIER:id COLON type:t
                {:
                    RESULT = new Parameter(id, t, idleft, idright, parser.compilation);
                 :}
                 ;

/* -------------------------------------------------
        Statements
   ------------------------------------------------- */
open_scope  ::= {: getEnvironment().enterScope(); :};
close_scope ::= {: getEnvironment().leaveScope(); :};
block	        	::= LBRACE open_scope local_declarations:d statements:s close_scope RBRACE
                        {:
                            RESULT = new BlockStatement();
                            RESULT.declarations = d;
                            RESULT.statements = s;
                        :}
                        ;
statements	   		::= statement:s statements:ss
                        {:
                            ss.addStatement(s);
                            RESULT = ss;
                        :} |
                        {:
                            RESULT = new Statements();
                        :}
                        ;
statement	        ::= open_statement:s {: RESULT = s ; :}
                        | closed_statement:s {: RESULT = s; :}
                        ;
open_statement	    ::= if_short:s {: RESULT = s; :} | if_long_closed_open:s {: RESULT = s; :} | loop_open:s {: RESULT = s; :} ;
if_short	        ::= IF LPAR expression:ex RPAR statement:st
                        {:
                            RESULT = new IfStatement(ex, st, null, parser.compilation);
                        :};
if_long_closed_open ::= IF LPAR expression:ex RPAR closed_statement:st ELSE open_statement:st2
                        {:
                            RESULT = new IfStatement(ex, st, st2, parser.compilation);
                        :};
closed_statement       ::= simple_statement:s SEMICOLON
                         {: RESULT = s; :}
		                 | REPEAT enter_cycle statement:st leave_cycle WHILE LPAR expression:ex RPAR SEMICOLON
		                 {: RESULT = new RepeatStatement(ex, st, parser.compilation); :}
		                 | block:b
		                 {: RESULT = b; :}
		                 | if_long_closed_closed:s
		                 {: RESULT = s; :}
		                 | loop_closed:s
		                 {: RESULT = s; :}
		                 | error SEMICOLON
		                 {: parser.compilation.addSuffix(" Analysis continues at next semicolon."); :}
		                 ;
simple_statement       ::=  expression:ex
                         {:
                            RESULT = new ExpressionStatement(ex, parser.compilation);
                         :}
						 | RETURN:r expression:ex
						 {:
						    RESULT = new ReturnStatement(rleft, rright, ex, parser.compilation);
						 :}
 						 | STOP:s
 						 {:
 						    RESULT = new StopStatement(sleft, sright, parser.compilation);
 						 :}
 						 | BREAK:s
 						 {:
 						    RESULT = new BreakStatement(sleft, sright, parser.compilation);
 						 :}
 						 ;
if_long_closed_closed  ::= IF LPAR expression:ex RPAR closed_statement:st ELSE closed_statement:stelse
                        {:
                            RESULT = new IfStatement(ex, st, stelse, parser.compilation);
                        :};
loop_closed	       ::=
                         foreach_head:c enter_cycle closed_statement:s leave_cycle {: c.body = s; RESULT = c; :}
		    		   | while_head:c enter_cycle closed_statement:s leave_cycle {: c.body = s; RESULT = c; :}
		    		   | for_head:c enter_cycle closed_statement:s leave_cycle {: c.body = s; RESULT = c; :}
		    		   ;
enter_cycle ::= {: getEnvironment().enterCycle(); :};
leave_cycle ::= {: getEnvironment().leaveCycle(); :};

loop_open	        ::=   foreach_head:c enter_cycle open_statement:s leave_cycle {: c.body = s; RESULT = c; :}
		                | while_head:c enter_cycle open_statement:s leave_cycle {: c.body = s; RESULT = c; :}
		                | for_head:c enter_cycle open_statement:s leave_cycle {: c.body = s; RESULT = c; :}
		                ;
		       
foreach_head	       ::= FOREACH LPAR IDENTIFIER:id IN expression:ex RPAR {: RESULT = new CycleStatement(); :};
while_head	       ::= WHILE LPAR expression:ex RPAR {: RESULT = new WhileStatement(ex, null, parser.compilation); :};
for_head	       ::= FOR LPAR expression:one SEMICOLON expression:two SEMICOLON expression:three RPAR {: RESULT = new CycleStatement(); :};


/* -------------------------------------------------
        Types
   ------------------------------------------------- */

type		::=    IDENTIFIER:id {: RESULT = Type.findType(id, idleft, idright, parser.compilation); :}
                 | list_type:t {: RESULT = t; :}
                 | type_instantiation:t {: RESULT = t; :}
                 ;
list_type	::= LIST:l OF type:inner
                {: Type t = Type.createArray(inner, lleft, lright); RESULT = t; :}
                ;
type_instantiation ::= IDENTIFIER:id LEFTTYPEBRACKET type_arguments:targ RIGHTTYPEBRACKET
                {: Type t = Type.instantiateTemplate(id, targ, idleft, idright, parser.compilation); RESULT = t; :}
                ;

type_arguments ::=
    type:tp {: RESULT = new ArrayList<>(); RESULT.add(tp); :}
    | type_arguments:tas COMMA type:tp {: tas.add(tp); RESULT = tas; :}
    ;
subroutine_type_parameters ::= type_parameters_inner:tpi
    {: Subroutine.enterTypeParameters(tpi, parser.compilation); RESULT = tpi; :}
    ;
type_parameters ::= type_parameters_inner:tpi {: RESULT = tpi; :};

type_parameters_inner ::=
    IDENTIFIER:id
     {: RESULT = new ArrayList<>(); RESULT.add(new TypeParameter(id, idleft, idright)); :}
     |
    type_parameters_inner:tp COMMA IDENTIFIER:id
    {: tp.add(new TypeParameter(id, idleft, idright)); RESULT = tp; :}
    ;

/* -------------------------------------------------
        Declarations
   ------------------------------------------------- */
global_declarations     	  ::=
               global_declarations:gds global_declaration:gd {: gds.add(gd); RESULT = gds; :}
               | {: RESULT = new Declarations(); :};
global_declaration            ::=
	type_declaration:t {: RESULT = t; :} |
	DEBUG_SPAWN_STRUCTURE IDENTIFIER:id {: Type theStructure = Type.createDebugStructure(id); getEnvironment().addType(theStructure); RESULT = theStructure; :} SEMICOLON |
	variable_declaration:v {: RESULT = v; :} |
	error SEMICOLON 
	{:
		parser.compilation.addSuffix(" Malformed declaration. Analysis continues at next semicolon.");
	:}
	;
local_declarations ::= local_declarations:decs local_declaration:l {: decs.add(l); RESULT = decs; :}
                        | {: RESULT = new Declarations(); :} ;
local_declaration  ::= variable_declaration:v {: RESULT = v; :};
type_declaration ::= TYPE store_statically_type_name EQUAL CLASS class_header LBRACE class_type_contents RBRACE SEMICOLON
                     {: RESULT = TypeDefinitionProcess.endTypeDefinition(parser.compilation); :}
                     | TYPE store_statically_type_name EQUAL STRUCTURE structure_header LBRACE structure_type_contents RBRACE SEMICOLON
                     {: RESULT = TypeDefinitionProcess.endTypeDefinition(parser.compilation); :}
                     ;
class_header ::= LEFTTYPEBRACKET class_type_parameters:tp RIGHTTYPEBRACKET {: TypeDefinitionProcess.setTypeParameters(tp); TypeDefinitionProcess.createClass(parser.compilation); :}
                    | {: TypeDefinitionProcess.setTypeParameters(null); TypeDefinitionProcess.createClass(parser.compilation); :} ;
structure_header ::= LEFTTYPEBRACKET class_type_parameters:tp RIGHTTYPEBRACKET {: TypeDefinitionProcess.setTypeParameters(tp); TypeDefinitionProcess.createClass(parser.compilation); :}
                    | {: TypeDefinitionProcess.setTypeParameters(null); TypeDefinitionProcess.createClass(parser.compilation); :} ;
store_statically_type_name ::= IDENTIFIER:id {: TypeDefinitionProcess.beginTypeDefinition(id, idleft, idright, parser.compilation); :};

class_type_parameters ::= type_parameters:tp {: RESULT = tp; :};

class_type_contents ::= local_declarations:ld subroutines:sbrt
                        {:
                            TypeDefinitionProcess.currentType.setDeclarations ( ld );
                            TypeDefinitionProcess.currentType.setSubroutines ( sbrt );
                        :}
                        ;
structure_type_contents ::= local_declarations:ld
                        {:
                            TypeDefinitionProcess.currentType.setDeclarations ( ld );
                        :}
                        ;


variable_declaration	::= IDENTIFIER:id COLON type:tp SEMICOLON
    {: Variable v = Variable.createAndAddToEnvironment(id, tp, idleft, idright, parser.compilation); RESULT = v; :}
    ;


/* -------------------------------------------------
        Expressions
   ------------------------------------------------- */
// Expressions
expressions	       ::=
    expression:ex {: RESULT = new Expressions(); RESULT.add(ex); :}
    | expressions:exs COMMA expression:ex {: exs.add(ex); RESULT = exs; :}
    ;
assignment_operator ::=
    UNARYPLUS {: RESULT = "+="; :}
    | UNARYMINUS {: RESULT = "-="; :}
    | UNARYTIMES {: RESULT = "*="; :}
    | UNARYDIVIDE {: RESULT = "/="; :}
    | UNARYMODULO {: RESULT = "%="; :}
    | UNARYSHIFTLEFT {: RESULT = "<<="; :}
    | UNARYSHIFTRIGHT {: RESULT = ">>="; :}
    | UNARYBITWISEAND {: RESULT = "&="; :}
    | UNARYXOR {: RESULT = "^="; :}
    | UNARYBITWISEOR {: RESULT = "|="; :}
    | EQUAL {: RESULT = "="; :}
    ;
relational_operator ::=
    LESSTHAN  {: RESULT = "<"; :}
    | GREATERTHAN  {: RESULT = ">"; :}
    | LESSOREQUAL  {: RESULT = "<="; :}
    | GREATEROREQUAL {: RESULT = ">="; :}
    ;

expression ::= expr13_assignment:e {: RESULT = e; :};
expr13_assignment ::=
    expr12_or:left assignment_operator:op expr13_assignment:right {: RESULT = BinaryExpression.create(left, op, right, opleft, opright, parser.compilation); :}
  | expr12_or:e {: RESULT = e; :}
    ;
expr12_or ::=
    expr12_or:e1 LOGICALOR:op expr11_and:e2 {: RESULT = BinaryExpression.create(e1, "||", e2, opleft, opright, parser.compilation); :}
  | expr11_and:e  {: RESULT = e; :}
    ;
expr11_and ::=
    expr11_and:e1 LOGICALAND:op expr10_bitwise_or:e2 {: RESULT = BinaryExpression.create(e1, "&&", e2, opleft, opright, parser.compilation); :}
  | expr10_bitwise_or:e  {: RESULT = e; :}
    ;
expr10_bitwise_or ::=
    expr10_bitwise_or:e1 BITWISEOR:op expr9_xor:e2 {: RESULT = BinaryExpression.create(e1, "|", e2, opleft, opright, parser.compilation); :}
  | expr9_xor:e  {: RESULT = e; :}
    ;
expr9_xor ::=
    expr9_xor:e1 XOR:op expr8_bitwise_and:e2 {: RESULT = BinaryExpression.create(e1, "^", e2, opleft, opright, parser.compilation); :}
  | expr8_bitwise_and:e  {: RESULT = e; :}
    ;
expr8_bitwise_and ::=
    expr8_bitwise_and:e1 BITWISEAND:op expr7_equality:e2 {: RESULT = BinaryExpression.create(e1, "&", e2, opleft, opright, parser.compilation); :}
  | expr7_equality:e  {: RESULT = e; :}
    ;
expr7_equality ::=
    expr7_equality:e1 EQUALEQUAL:op expr6_comparison:e2 {: RESULT = BinaryExpression.create(e1, "==", e2, opleft, opright, parser.compilation); :}
  | expr7_equality:e1 UNEQUAL:op expr6_comparison:e2 {: RESULT = BinaryExpression.create(e1, "!=", e2, opleft, opright, parser.compilation); :}
  | expr6_comparison:e  {: RESULT = e; :}
    ;
expr6_comparison ::=
    expr6_comparison:e1 relational_operator:op expr5_shift:e2 {: RESULT = BinaryExpression.create(e1, op, e2, opleft, opright, parser.compilation); :}
  | expr5_shift:e  {: RESULT = e; :}
    ;
expr5_shift ::=
    expr5_shift:e1 SHIFTLEFT:op expr4_addition:e2 {: RESULT = BinaryExpression.create(e1, "<<", e2, opleft, opright, parser.compilation); :}
  | expr5_shift:e1 SHIFTRIGHT:op expr4_addition:e2 {: RESULT = BinaryExpression.create(e1, ">>", e2, opleft, opright, parser.compilation); :}
  | expr4_addition:e  {: RESULT = e; :}
    ;
expr4_addition ::=
    expr4_addition:e1 MINUS:op expr3_multiplication:e2 {: RESULT = BinaryExpression.create(e1, "-", e2, opleft, opright, parser.compilation); :}
  | expr4_addition:e1 PLUS:op expr3_multiplication:e2 {: RESULT = BinaryExpression.create(e1, "+", e2, opleft, opright, parser.compilation); :}
  | expr4_addition:e1 CONCATENATE:op expr3_multiplication:e2 {: RESULT = BinaryExpression.create(e1, "@", e2, opleft, opright, parser.compilation); :}
  | expr3_multiplication:e  {: RESULT = e; :}
    ;
expr3_multiplication ::=
    expr3_multiplication:e1 TIMES:op expr2_prefix:e2 {: RESULT = BinaryExpression.create(e1, "*", e2, opleft, opright, parser.compilation); :}
  | expr3_multiplication:e1 DIVIDE:op expr2_prefix:e2 {: RESULT = BinaryExpression.create(e1, "/", e2, opleft, opright, parser.compilation); :}
  | expr3_multiplication:e1 MODULO:op expr2_prefix:e2 {: RESULT = BinaryExpression.create(e1, "%", e2, opleft, opright, parser.compilation); :}
  | expr2_prefix:e  {: RESULT = e; :}
    ;
expr2_prefix ::=
    INCREMENT:op expr2_prefix:right {: RESULT = UnaryExpression.create("++", UnaryExpressionSide.Prefix, right, opleft, opright, parser.compilation); :}
  | DECREMENT:op expr2_prefix:right {: RESULT = UnaryExpression.create("--", UnaryExpressionSide.Prefix, right, opleft, opright, parser.compilation); :}
  | LOGICALNEGATION:op expr2_prefix:right {: RESULT = UnaryExpression.create("!", UnaryExpressionSide.Prefix, right, opleft, opright, parser.compilation); :}
  | BITWISENEGATION:op expr2_prefix:right {: RESULT = UnaryExpression.create("~", UnaryExpressionSide.Prefix, right, opleft, opright, parser.compilation); :}
  | PLUS:op expr2_prefix:right {: RESULT = UnaryExpression.create("+", UnaryExpressionSide.Prefix, right, opleft, opright, parser.compilation); :}
  | MINUS:op expr2_prefix:right {: RESULT = UnaryExpression.create("-", UnaryExpressionSide.Prefix, right, opleft, opright, parser.compilation); :}
  | expr1_postfix:e  {: RESULT = e; :}
    ;
expr1_postfix ::=
    expr1_subroutinegroup:id LPAR RPAR {: RESULT = CallExpression.create(id, null, null, idleft, idright, parser.compilation); :}
  | expr1_subroutinegroup:id LPAR expressions:args RPAR{: RESULT = CallExpression.create(id, null, args, idleft, idright, parser.compilation); :}
  | expr1_subroutinegroup:id LEFTTYPEBRACKET type_arguments:targs RIGHTTYPEBRACKET LPAR expressions:args RPAR {: RESULT = CallExpression.create(id, targs, args, idleft, idright, parser.compilation); :}
  | expr1_subroutinegroup:id LEFTTYPEBRACKET type_arguments:targs RIGHTTYPEBRACKET LPAR RPAR {: RESULT = CallExpression.create(id, targs, null, idleft, idright, parser.compilation); :}
  | expr1_postfix PERIOD IDENTIFIER /* Variable expression */
  | expr1_postfix LBRACKET expression RBRACKET /* Variable expression */
  | expr1_postfix:left INCREMENT:op {: RESULT = UnaryExpression.create("++", UnaryExpressionSide.Postfix, left, opleft, opright, parser.compilation); :}
  | expr1_postfix:left DECREMENT:op {: RESULT = UnaryExpression.create("--", UnaryExpressionSide.Postfix, left, opleft, opright, parser.compilation); :}
  | expr0_simple:e  {: RESULT = e; :}
    ;
expr1_subroutinegroup ::=
    IDENTIFIER:id {: RESULT = SubroutineGroup.create(id, idleft, idright, parser.compilation); :} |
    expr1_postfix:var PERIOD IDENTIFIER:id {: RESULT = SubroutineGroup.create(var, id, varleft, varright, parser.compilation); :}
    ;
expr0_simple ::=
    LPAR expression:e RPAR {: RESULT = e; :}
    | constant:e  {: RESULT = e; :}
    | NEW IDENTIFIER:id LPAR RPAR {: RESULT = new ConstructorExpression(id, idleft, idright, parser.compilation); :}
    | NEW IDENTIFIER:id LEFTTYPEBRACKET type_arguments:targ RIGHTTYPEBRACKET LPAR RPAR {: RESULT = new ConstructorExpression(id, targ, idleft, idright, parser.compilation); :}
    | IDENTIFIER:id {: RESULT = new VariableExpression(id, idleft, idright, parser.compilation); :}
    ;

constant	       ::=
                    INTEGER:data {: RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); :} |
                    FLOAT:data {: RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); :} |
                    STRING:data {: RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); :} |
                    CHARACTER:data {: RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); :} |
                    BOOLEAN:data {: RESULT = Expression.createFromConstant(data, dataleft, dataright, parser.compilation); :} |
                    NULL:data {: RESULT = new NullExpression(dataleft, dataright, parser.compilation); :} |
                    new_list:data {: RESULT = data; :}
                    ;
new_list	       ::= LBRACKET expressions:ex RBRACKET {: RESULT = ArrayConstructorExpression.infer(ex, exleft, exright, parser.compilation); :}
                     | NEW type:t LBRACKET INTEGER:i RBRACKET {: RESULT = new ArrayConstructorExpression(t, i, tleft, tright, parser.compilation); :}
                     ;
